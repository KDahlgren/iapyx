define(log_prov1, {string, string, int, int});
define(missing_log_prov7, {string, string, string, int});
define(node, {string, string, int});
define(rbcast_prov3, {string, string, string, int, int});
define(pre_prov8, {string, string, int});
define(ack_prov4, {string, string, string, int, int});
define(crash, {string, string, int, int});
define(pre, {string, string, int});
define(rbcast_prov5, {string, string, string, int});
define(ack_prov2, {string, string, string, int, int});
define(post, {string, string, int});
define(log, {string, string, int});
define(ack, {string, string, string, int});
define(post_prov9, {string, string, int});
define(clock, {string, string, int, int});
define(log_prov6, {string, string, int});
define(missing_log, {string, string, int});
define(bcast, {string, string, int});
define(rbcast, {string, string, string, int});
define(node_prov0, {string, string, int, int});
node("a", "b", 1);
node("a", "c", 1);
node("b", "a", 1);
node("b", "c", 1);
node("c", "a", 1);
node("c", "b", 1);
bcast("a", "hello", 1);
node(Node, Neighbor, NRESERVED + 1) :- node(Node, Neighbor, NRESERVED), clock(Node, _, NRESERVED, _);
log(Node, Pload, NRESERVED + 1) :- log(Node, Pload, NRESERVED), clock(Node, _, NRESERVED, _);
ack(S, H, P, NRESERVED + 1) :- ack(S, H, P, NRESERVED), clock(S, _, NRESERVED, _);
rbcast(Node2, Node1, Pload, MRESERVED) :- log(Node1, Pload, NRESERVED), node(Node1, Node2, NRESERVED), clock(Node1, Node2, NRESERVED, MRESERVED), notin ack(Node1, Node2, Pload, NRESERVED);
ack(From, Host, Pl, MRESERVED) :- rbcast(Host, From, Pl, NRESERVED), clock(Host, From, NRESERVED, MRESERVED);
rbcast(A, A, P, NRESERVED) :- bcast(A, P, NRESERVED), clock(A, A, NRESERVED, _);
log(N, P, NRESERVED) :- rbcast(N, _, P, NRESERVED), clock(N, N, NRESERVED, _);
missing_log(A, Pl, NRESERVED) :- log(X, Pl, NRESERVED), node(X, A, NRESERVED), clock(X, X, NRESERVED, _), notin log(A, Pl, NRESERVED);
pre(X, Pl, NRESERVED) :- log(X, Pl, NRESERVED), clock(X, X, NRESERVED, _), notin bcast(X, Pl, 1), notin crash(X, X, _, NRESERVED);
post(X, Pl, NRESERVED) :- log(X, Pl, NRESERVED), clock(X, X, NRESERVED, _), notin missing_log(_, Pl, NRESERVED);
node_prov0(Node, Neighbor, NRESERVED, NRESERVED + 1) :- node(Node, Neighbor, NRESERVED), clock(Node, _, NRESERVED, _);
log_prov1(Node, Pload, NRESERVED, NRESERVED + 1) :- log(Node, Pload, NRESERVED), clock(Node, _, NRESERVED, _);
ack_prov2(S, H, P, NRESERVED, NRESERVED + 1) :- ack(S, H, P, NRESERVED), clock(S, _, NRESERVED, _);
rbcast_prov3(Node2, Node1, Pload, NRESERVED, MRESERVED) :- log(Node1, Pload, NRESERVED), node(Node1, Node2, NRESERVED), clock(Node1, Node2, NRESERVED, MRESERVED), notin ack(Node1, Node2, Pload, NRESERVED);
ack_prov4(From, Host, Pl, NRESERVED, MRESERVED) :- rbcast(Host, From, Pl, NRESERVED), clock(Host, From, NRESERVED, MRESERVED);
rbcast_prov5(A, A, P, NRESERVED) :- bcast(A, P, NRESERVED), clock(A, A, NRESERVED, _);
log_prov6(N, P, NRESERVED) :- rbcast(N, _, P, NRESERVED), clock(N, N, NRESERVED, _);
missing_log_prov7(A, Pl, X, NRESERVED) :- log(X, Pl, NRESERVED), node(X, A, NRESERVED), clock(X, X, NRESERVED, _), notin log(A, Pl, NRESERVED);
pre_prov8(X, Pl, NRESERVED) :- log(X, Pl, NRESERVED), clock(X, X, NRESERVED, _), notin bcast(X, Pl, 1), notin crash(X, X, _, NRESERVED);
post_prov9(X, Pl, NRESERVED) :- log(X, Pl, NRESERVED), clock(X, X, NRESERVED, _), notin missing_log(_, Pl, NRESERVED);
clock("a", "a", 1, 2);
clock("b", "b", 1, 2);
clock("c", "c", 1, 2);
clock("a", "a", 1, 2);
clock("a", "b", 1, 2);
clock("a", "c", 1, 2);
clock("b", "a", 1, 2);
clock("b", "b", 1, 2);
clock("b", "c", 1, 2);
clock("c", "a", 1, 2);
clock("c", "b", 1, 2);
clock("c", "c", 1, 2);
clock("a", "a", 2, 3);
clock("b", "b", 2, 3);
clock("c", "c", 2, 3);
clock("a", "a", 2, 3);
clock("a", "b", 2, 3);
clock("a", "c", 2, 3);
clock("b", "a", 2, 3);
clock("b", "b", 2, 3);
clock("b", "c", 2, 3);
clock("c", "a", 2, 3);
clock("c", "b", 2, 3);
clock("c", "c", 2, 3);
clock("a", "a", 3, 4);
clock("b", "b", 3, 4);
clock("c", "c", 3, 4);
clock("a", "a", 3, 4);
clock("a", "b", 3, 4);
clock("a", "c", 3, 4);
clock("b", "a", 3, 4);
clock("b", "b", 3, 4);
clock("b", "c", 3, 4);
clock("c", "a", 3, 4);
clock("c", "b", 3, 4);
clock("c", "c", 3, 4);
clock("a", "a", 4, 5);
clock("b", "b", 4, 5);
clock("c", "c", 4, 5);
clock("a", "a", 4, 5);
clock("a", "b", 4, 5);
clock("a", "c", 4, 5);
clock("b", "a", 4, 5);
clock("b", "b", 4, 5);
clock("b", "c", 4, 5);
clock("c", "a", 4, 5);
clock("c", "b", 4, 5);
clock("c", "c", 4, 5);
clock("a", "a", 5, 6);
clock("b", "b", 5, 6);
clock("c", "c", 5, 6);
clock("a", "a", 5, 6);
clock("a", "b", 5, 6);
clock("a", "c", 5, 6);
clock("b", "a", 5, 6);
clock("b", "b", 5, 6);
clock("b", "c", 5, 6);
clock("c", "a", 5, 6);
clock("c", "b", 5, 6);
clock("c", "c", 5, 6);
clock("a", "a", 6, 7);
clock("b", "b", 6, 7);
clock("c", "c", 6, 7);
clock("a", "a", 6, 7);
clock("a", "b", 6, 7);
clock("a", "c", 6, 7);
clock("b", "a", 6, 7);
clock("b", "b", 6, 7);
clock("b", "c", 6, 7);
clock("c", "a", 6, 7);
clock("c", "b", 6, 7);
clock("c", "c", 6, 7);
