define(timer_svc_prov12, {string, string, int, int});
define(decision_req_prov3, {string, string, string, int, int});
define(agent, {string, string, int});
define(timer_svc, {string, string, int, int});
define(prepared, {string, string, string, string, int});
define(abort_prov8, {string, string, int, string, int});
define(missing_vote, {string, string, int});
define(decision_prov38, {string, string, string, int});
define(abort_prov18, {string, string, int, int});
define(good, {string, string, int});
define(clock, {string, string, int, int});
define(vote_prov25, {string, string, string, string, int, int});
define(gotta_abort_prov6, {string, string, string, int});
define(timer_state, {string, string, int, int});
define(vote, {string, string, string, string, int});
define(pre_prov36, {string, string, int});
define(post_prov42, {string, string, int});
define(agent_prov27, {string, string, int, int});
define(disagree_prov40, {string, string, string, int});
define(can, {string, string, int});
define(known, {string, string, string, int});
define(abort_prov24, {string, string, int, string, int});
define(abort_prov13, {string, string, int, int});
define(post, {string, string, int});
define(post_prov11, {string, string, string, int});
define(commit_prov30, {string, string, int, int});
define(vote_prov31, {string, string, string, string, int, int});
define(prepared_prov32, {string, string, string, string, int, int});
define(timeout_prov35, {string, string, int});
define(begin, {string, string, int});
define(running, {string, string, int});
define(prepare, {string, string, string, int});
define(gotta_abort, {string, string, string, int});
define(good_prov10, {string, string, string, int});
define(prepare_prov17, {string, string, string, int, int});
define(disagree, {string, int});
define(good_prov9, {string, string, int});
define(decision, {string, string, string, int});
define(timer_cancel, {string, string, int});
define(abort_prov7, {string, string, int});
define(pre, {string, string, int});
define(crash, {string, string, int, int});
define(timeout_prov16, {string, string, int});
define(timer_state_prov15, {string, string, int, int, int, int});
define(abort_prov29, {string, string, int, int});
define(abort_prov5, {string, string, int, string, int});
define(commit_prov4, {string, string, int, string, int});
define(commit, {string, string, int});
define(timer_svc_prov0, {string, string, int, int});
define(prepared_prov26, {string, string, string, string, int});
define(missing_vote_prov20, {string, string, string, int});
define(commit_prov19, {string, string, int, int});
define(running_prov22, {string, string, int, int});
define(timer_state_prov34, {string, string, int, int, int, int});
define(post_prov37, {string, string, string, string, int});
define(known_prov2, {string, string, string, int});
define(timer_state_prov14, {string, string, int, int, int, int});
define(decision_prov39, {string, string, string, int});
define(known_prov1, {string, string, string, int});
define(timer_state_prov33, {string, string, int, int, int, int});
define(decision_req, {string, string, string, int});
define(abort, {string, string, int});
define(running_prov21, {string, string, int});
define(can_prov28, {string, string, int, int});
define(commit_prov23, {string, string, int, string, int});
define(pre_prov41, {string, string, int});
define(timeout, {string, string, int});
agent("a", "C", 1);
agent("b", "C", 1);
agent("d", "C", 1);
begin("C", "hello", 1);
agent("C", "a", 1);
agent("C", "b", 1);
agent("C", "d", 1);
agent("a", "b", 1);
agent("a", "d", 1);
agent("b", "a", 1);
agent("b", "d", 1);
agent("d", "a", 1);
agent("d", "b", 1);
can("a", "hello", 1);
can("b", "hello", 1);
can("d", "hello", 1);
timer_svc(Agent, Xact, 4, NRESERVED) :- prepare(Agent, _, Xact, NRESERVED), can(Agent, Xact, NRESERVED), clock(Agent, Agent, NRESERVED, _);
known(Agent, Xact, "C", NRESERVED) :- commit(Agent, Xact, NRESERVED), clock(Agent, Agent, NRESERVED, _);
known(Agent, Xact, "A", NRESERVED) :- abort(Agent, Xact, NRESERVED), clock(Agent, Agent, NRESERVED, _);
decision_req(Other, Agent, Xact, MRESERVED) :- timeout(Agent, Xact, NRESERVED), agent(Agent, Other, NRESERVED), clock(Agent, Other, NRESERVED, MRESERVED), notin known(Agent, Xact, _, NRESERVED);
commit(Requestor, Xact, MRESERVED) :- decision_req(Agent, Requestor, Xact, NRESERVED), commit(Agent, Xact, NRESERVED), clock(Agent, Requestor, NRESERVED, MRESERVED);
abort(Requestor, Xact, MRESERVED) :- decision_req(Agent, Requestor, Xact, NRESERVED), abort(Agent, Xact, NRESERVED), clock(Agent, Requestor, NRESERVED, MRESERVED);
gotta_abort(Agent, Requestor, Xact, NRESERVED) :- decision_req(Agent, Requestor, Xact, NRESERVED), clock(Agent, Agent, NRESERVED, _), notin prepared(Agent, _, Xact, _, NRESERVED);
abort(Agent, Xact, NRESERVED) :- gotta_abort(Agent, _, Xact, NRESERVED), clock(Agent, Agent, NRESERVED, _);
abort(Requestor, Xact, MRESERVED) :- decision_req(Agent, Requestor, Xact, NRESERVED), prepared(Agent, _, Xact, "N", NRESERVED), clock(Agent, Requestor, NRESERVED, MRESERVED);
good(A, X, NRESERVED) :- begin(A, X, 1), crash(A, A, _, NRESERVED), clock(A, A, NRESERVED, _);
good(B, X, NRESERVED) :- begin(A, X, 1), crash(A, A, _, NRESERVED), agent(A, B, NRESERVED), clock(A, A, NRESERVED, _);
post("termination", X, NRESERVED) :- begin(A, X, 1), crash(A, A, _, NRESERVED), clock(A, A, NRESERVED, _);
timer_svc(C, X, 4, NRESERVED) :- begin(C, X, NRESERVED), clock(C, C, NRESERVED, _);
abort(C, X, NRESERVED + 1) :- timeout(C, X, NRESERVED), missing_vote(C, X, NRESERVED), clock(C, _, NRESERVED, _);
timer_state(H, I, T - 1, NRESERVED + 1) :- timer_svc(H, I, T, NRESERVED), clock(H, _, NRESERVED, _);
timer_state(H, I, T - 1, NRESERVED + 1) :- timer_state(H, I, T, NRESERVED), T > 1, clock(H, _, NRESERVED, _), notin timer_cancel(H, I, NRESERVED);
timeout(H, I, NRESERVED) :- timer_state(H, I, 1, NRESERVED), clock(H, H, NRESERVED, _);
prepare(Agent, Coord, Xact, MRESERVED) :- running(Coord, Xact, NRESERVED), agent(Coord, Agent, NRESERVED), clock(Coord, Agent, NRESERVED, MRESERVED);
abort(C, X, NRESERVED + 1) :- vote(C, _, X, "N", NRESERVED), clock(C, _, NRESERVED, _);
commit(C, X, NRESERVED + 1) :- vote(C, _, X, "Y", NRESERVED), clock(C, _, NRESERVED, _), notin missing_vote(C, X, NRESERVED);
missing_vote(C, X, NRESERVED) :- agent(C, A, NRESERVED), running(C, X, NRESERVED), clock(C, C, NRESERVED, _), notin vote(C, A, X, "Y", NRESERVED);
running(Coord, Xact, NRESERVED) :- begin(Coord, Xact, NRESERVED), clock(Coord, Coord, NRESERVED, _);
running(C, X, NRESERVED + 1) :- running(C, X, NRESERVED), clock(C, _, NRESERVED, _), notin commit(C, X, NRESERVED), notin abort(C, X, NRESERVED);
commit(A, X, MRESERVED) :- commit(C, X, NRESERVED), agent(C, A, NRESERVED), clock(C, A, NRESERVED, MRESERVED);
abort(A, X, MRESERVED) :- abort(C, X, NRESERVED), agent(C, A, NRESERVED), clock(C, A, NRESERVED, MRESERVED);
vote(Coord, Agent, Xact, "Y", MRESERVED) :- prepare(Agent, Coord, Xact, NRESERVED), can(Agent, Xact, NRESERVED), clock(Agent, Coord, NRESERVED, MRESERVED);
prepared(A, C, X, "Y", NRESERVED) :- prepare(A, C, X, NRESERVED), can(A, X, NRESERVED), clock(A, A, NRESERVED, _);
agent(C, A, NRESERVED + 1) :- agent(C, A, NRESERVED), clock(C, _, NRESERVED, _);
can(A, X, NRESERVED + 1) :- can(A, X, NRESERVED), clock(A, _, NRESERVED, _);
abort(C, X, NRESERVED + 1) :- abort(C, X, NRESERVED), clock(C, _, NRESERVED, _);
commit(C, X, NRESERVED + 1) :- commit(C, X, NRESERVED), clock(C, _, NRESERVED, _);
vote(C, A, X, S, NRESERVED + 1) :- vote(C, A, X, S, NRESERVED), clock(C, _, NRESERVED, _);
prepared(C, A, X, Y, NRESERVED + 1) :- prepared(C, A, X, Y, NRESERVED), clock(C, _, NRESERVED, _);
timer_state(H, I, T - 1, NRESERVED + 1) :- timer_svc(H, I, T, NRESERVED), clock(H, _, NRESERVED, _);
timer_state(H, I, T - 1, NRESERVED + 1) :- timer_state(H, I, T, NRESERVED), T > 1, clock(H, _, NRESERVED, _), notin timer_cancel(H, I, NRESERVED);
timeout(H, I, NRESERVED) :- timer_state(H, I, 1, NRESERVED), clock(H, H, NRESERVED, _);
pre("termination", X, NRESERVED) :- prepared(_, _, X, _, NRESERVED), clock(_, _, NRESERVED, _);
post("termination", X, NRESERVED) :- decision(A1, X, _, NRESERVED), decision(A2, X, _, NRESERVED), A1 != A2, clock(A1, A1, NRESERVED, _);
decision(C, X, "c", NRESERVED) :- commit(C, X, NRESERVED), clock(C, C, NRESERVED, _);
decision(C, X, "a", NRESERVED) :- abort(C, X, NRESERVED), clock(C, C, NRESERVED, _);
disagree(X, NRESERVED) :- decision(_, X, V1, NRESERVED), decision(_, X, V2, NRESERVED), V1 != V2, clock(_, _, NRESERVED, _);
pre("decide", X, NRESERVED) :- decision(_, X, _, NRESERVED), clock(_, _, NRESERVED, _);
post("decide", X, NRESERVED) :- decision(_, X, V, NRESERVED), clock(_, _, NRESERVED, _), notin disagree(X, NRESERVED);
timer_svc_prov0(Agent, Xact, 4, NRESERVED) :- prepare(Agent, _, Xact, NRESERVED), can(Agent, Xact, NRESERVED), clock(Agent, Agent, NRESERVED, _);
known_prov1(Agent, Xact, "C", NRESERVED) :- commit(Agent, Xact, NRESERVED), clock(Agent, Agent, NRESERVED, _);
known_prov2(Agent, Xact, "A", NRESERVED) :- abort(Agent, Xact, NRESERVED), clock(Agent, Agent, NRESERVED, _);
decision_req_prov3(Other, Agent, Xact, NRESERVED, MRESERVED) :- timeout(Agent, Xact, NRESERVED), agent(Agent, Other, NRESERVED), clock(Agent, Other, NRESERVED, MRESERVED), notin known(Agent, Xact, _, NRESERVED);
commit_prov4(Requestor, Xact, NRESERVED, Agent, MRESERVED) :- decision_req(Agent, Requestor, Xact, NRESERVED), commit(Agent, Xact, NRESERVED), clock(Agent, Requestor, NRESERVED, MRESERVED);
abort_prov5(Requestor, Xact, NRESERVED, Agent, MRESERVED) :- decision_req(Agent, Requestor, Xact, NRESERVED), abort(Agent, Xact, NRESERVED), clock(Agent, Requestor, NRESERVED, MRESERVED);
gotta_abort_prov6(Agent, Requestor, Xact, NRESERVED) :- decision_req(Agent, Requestor, Xact, NRESERVED), clock(Agent, Agent, NRESERVED, _), notin prepared(Agent, _, Xact, _, NRESERVED);
abort_prov7(Agent, Xact, NRESERVED) :- gotta_abort(Agent, _, Xact, NRESERVED), clock(Agent, Agent, NRESERVED, _);
abort_prov8(Requestor, Xact, NRESERVED, Agent, MRESERVED) :- decision_req(Agent, Requestor, Xact, NRESERVED), prepared(Agent, _, Xact, "N", NRESERVED), clock(Agent, Requestor, NRESERVED, MRESERVED);
good_prov9(A, X, NRESERVED) :- begin(A, X, 1), crash(A, A, _, NRESERVED), clock(A, A, NRESERVED, _);
good_prov10(B, X, A, NRESERVED) :- begin(A, X, 1), crash(A, A, _, NRESERVED), agent(A, B, NRESERVED), clock(A, A, NRESERVED, _);
post_prov11("termination", X, A, NRESERVED) :- begin(A, X, 1), crash(A, A, _, NRESERVED), clock(A, A, NRESERVED, _);
timer_svc_prov12(C, X, 4, NRESERVED) :- begin(C, X, NRESERVED), clock(C, C, NRESERVED, _);
abort_prov13(C, X, NRESERVED, NRESERVED + 1) :- timeout(C, X, NRESERVED), missing_vote(C, X, NRESERVED), clock(C, _, NRESERVED, _);
timer_state_prov14(H, I, T - 1, T, NRESERVED, NRESERVED + 1) :- timer_svc(H, I, T, NRESERVED), clock(H, _, NRESERVED, _);
timer_state_prov15(H, I, T - 1, T, NRESERVED, NRESERVED + 1) :- timer_state(H, I, T, NRESERVED), T > 1, clock(H, _, NRESERVED, _), notin timer_cancel(H, I, NRESERVED);
timeout_prov16(H, I, NRESERVED) :- timer_state(H, I, 1, NRESERVED), clock(H, H, NRESERVED, _);
prepare_prov17(Agent, Coord, Xact, NRESERVED, MRESERVED) :- running(Coord, Xact, NRESERVED), agent(Coord, Agent, NRESERVED), clock(Coord, Agent, NRESERVED, MRESERVED);
abort_prov18(C, X, NRESERVED, NRESERVED + 1) :- vote(C, _, X, "N", NRESERVED), clock(C, _, NRESERVED, _);
commit_prov19(C, X, NRESERVED, NRESERVED + 1) :- vote(C, _, X, "Y", NRESERVED), clock(C, _, NRESERVED, _), notin missing_vote(C, X, NRESERVED);
missing_vote_prov20(C, X, A, NRESERVED) :- agent(C, A, NRESERVED), running(C, X, NRESERVED), clock(C, C, NRESERVED, _), notin vote(C, A, X, "Y", NRESERVED);
running_prov21(Coord, Xact, NRESERVED) :- begin(Coord, Xact, NRESERVED), clock(Coord, Coord, NRESERVED, _);
running_prov22(C, X, NRESERVED, NRESERVED + 1) :- running(C, X, NRESERVED), clock(C, _, NRESERVED, _), notin commit(C, X, NRESERVED), notin abort(C, X, NRESERVED);
commit_prov23(A, X, NRESERVED, C, MRESERVED) :- commit(C, X, NRESERVED), agent(C, A, NRESERVED), clock(C, A, NRESERVED, MRESERVED);
abort_prov24(A, X, NRESERVED, C, MRESERVED) :- abort(C, X, NRESERVED), agent(C, A, NRESERVED), clock(C, A, NRESERVED, MRESERVED);
vote_prov25(Coord, Agent, Xact, "Y", NRESERVED, MRESERVED) :- prepare(Agent, Coord, Xact, NRESERVED), can(Agent, Xact, NRESERVED), clock(Agent, Coord, NRESERVED, MRESERVED);
prepared_prov26(A, C, X, "Y", NRESERVED) :- prepare(A, C, X, NRESERVED), can(A, X, NRESERVED), clock(A, A, NRESERVED, _);
agent_prov27(C, A, NRESERVED, NRESERVED + 1) :- agent(C, A, NRESERVED), clock(C, _, NRESERVED, _);
can_prov28(A, X, NRESERVED, NRESERVED + 1) :- can(A, X, NRESERVED), clock(A, _, NRESERVED, _);
abort_prov29(C, X, NRESERVED, NRESERVED + 1) :- abort(C, X, NRESERVED), clock(C, _, NRESERVED, _);
commit_prov30(C, X, NRESERVED, NRESERVED + 1) :- commit(C, X, NRESERVED), clock(C, _, NRESERVED, _);
vote_prov31(C, A, X, S, NRESERVED, NRESERVED + 1) :- vote(C, A, X, S, NRESERVED), clock(C, _, NRESERVED, _);
prepared_prov32(C, A, X, Y, NRESERVED, NRESERVED + 1) :- prepared(C, A, X, Y, NRESERVED), clock(C, _, NRESERVED, _);
timer_state_prov33(H, I, T - 1, T, NRESERVED, NRESERVED + 1) :- timer_svc(H, I, T, NRESERVED), clock(H, _, NRESERVED, _);
timer_state_prov34(H, I, T - 1, T, NRESERVED, NRESERVED + 1) :- timer_state(H, I, T, NRESERVED), T > 1, clock(H, _, NRESERVED, _), notin timer_cancel(H, I, NRESERVED);
timeout_prov35(H, I, NRESERVED) :- timer_state(H, I, 1, NRESERVED), clock(H, H, NRESERVED, _);
pre_prov36("termination", X, NRESERVED) :- prepared(_, _, X, _, NRESERVED), clock(_, _, NRESERVED, _);
post_prov37("termination", X, A2, A1, NRESERVED) :- decision(A1, X, _, NRESERVED), decision(A2, X, _, NRESERVED), A1 != A2, clock(A1, A1, NRESERVED, _);
decision_prov38(C, X, "c", NRESERVED) :- commit(C, X, NRESERVED), clock(C, C, NRESERVED, _);
decision_prov39(C, X, "a", NRESERVED) :- abort(C, X, NRESERVED), clock(C, C, NRESERVED, _);
disagree_prov40(X, V1, V2, NRESERVED) :- decision(_, X, V1, NRESERVED), decision(_, X, V2, NRESERVED), V1 != V2, clock(_, _, NRESERVED, _);
pre_prov41("decide", X, NRESERVED) :- decision(_, X, _, NRESERVED), clock(_, _, NRESERVED, _);
post_prov42("decide", X, NRESERVED) :- decision(_, X, V, NRESERVED), clock(_, _, NRESERVED, _), notin disagree(X, NRESERVED);
clock("a", "a", 1, 2);
clock("b", "b", 1, 2);
clock("c", "c", 1, 2);
clock("a", "a", 1, 2);
clock("a", "b", 1, 2);
clock("a", "c", 1, 2);
clock("b", "a", 1, 2);
clock("b", "b", 1, 2);
clock("b", "c", 1, 2);
clock("c", "a", 1, 2);
clock("c", "b", 1, 2);
clock("c", "c", 1, 2);
clock("a", "a", 2, 3);
clock("b", "b", 2, 3);
clock("c", "c", 2, 3);
clock("a", "a", 2, 3);
clock("a", "b", 2, 3);
clock("a", "c", 2, 3);
clock("b", "a", 2, 3);
clock("b", "b", 2, 3);
clock("b", "c", 2, 3);
clock("c", "a", 2, 3);
clock("c", "b", 2, 3);
clock("c", "c", 2, 3);
clock("a", "a", 3, 4);
clock("b", "b", 3, 4);
clock("c", "c", 3, 4);
clock("a", "a", 3, 4);
clock("a", "b", 3, 4);
clock("a", "c", 3, 4);
clock("b", "a", 3, 4);
clock("b", "b", 3, 4);
clock("b", "c", 3, 4);
clock("c", "a", 3, 4);
clock("c", "b", 3, 4);
clock("c", "c", 3, 4);
clock("a", "a", 4, 5);
clock("b", "b", 4, 5);
clock("c", "c", 4, 5);
clock("a", "a", 4, 5);
clock("a", "b", 4, 5);
clock("a", "c", 4, 5);
clock("b", "a", 4, 5);
clock("b", "b", 4, 5);
clock("b", "c", 4, 5);
clock("c", "a", 4, 5);
clock("c", "b", 4, 5);
clock("c", "c", 4, 5);
