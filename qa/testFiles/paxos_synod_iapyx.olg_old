define(timer_svc,{string,string,int,int});
define(nodes,{string,string,int,int});
define(seed,{string,int,int});
define(prepare,{string,string,int,string,int});
define(update_seed,{string,int});
define(redo,{string,string,int});
define(response_log,{string,string,int,string,int,int});
define(response_cnt,{string,int,int,int});
define(best,{string,int,int,int});
define(what,{string,int,int});
define(agent_cnt,{string,int,int});
define(accept,{string,int,string,int});
define(dominated,{string,int,int});
define(can_respond,{string,string,int,string,int});
define(prepare_response,{string,string,int,string,int,int});
define(highest_accepted,{string,int,int});
define(accepted,{string,int,string,int});
define(prepare_log,{string,int,string,int});
define(my_proposal,{string,string,int});
define(important,{string,string,int});
define(pre,{string,int});
define(disagree,{string,int});
define(post,{string,int});
define(bad,{string,int});
define(good,{string,int});
define(timer_state,{string,string,int,int});
define(timeout,{string,string,int});
define(timer_svc_prov0,{string,string,int,int});
define(nodes_prov1,{string,string,int,int,int});
define(seed_prov2,{string,int,int,int});
define(seed_prov3,{string,int,int,int,int,int});
define(prepare_prov4,{string,string,int,string,int,int});
define(update_seed_prov5,{string,int});
define(redo_prov6,{string,string,int});
define(prepare_prov7,{string,string,int,string,int,int});
define(timer_svc_prov8,{string,string,int,int});
define(update_seed_prov9,{string,string,int});
define(response_log_prov10,{string,string,int,string,int,int});
define(response_log_prov11,{string,string,int,string,int,int,int});
define(response_cnt_vars,{string,int,int,string,string,int,int});
define(response_cnt_prov12,{string,int,int,int});
define(best_vars,{string,int,int,string,string,int});
define(best_prov13,{string,int,int,int});
define(what_prov14,{string,int,int});
define(agent_cnt_vars,{string,int,int});
define(agent_cnt_prov15,{string,int,int});
define(accept_prov16,{string,int,string,string,int,int,int,int,int});
define(accept_prov17,{string,int,string,string,int,int,int,string,int,int});
define(dominated_prov18,{string,int,int,int});
define(can_respond_prov19,{string,string,int,string,int});
define(prepare_response_prov20,{string,string,int,string,int,string,int,int});
define(prepare_response_prov21,{string,string,int,string,int,string,int,int});
define(highest_accepted_vars,{string,int,int});
define(highest_accepted_prov22,{string,int,int});
define(accepted_prov23,{string,int,string,int});
define(accepted_prov24,{string,int,string,int,int});
define(prepare_log_prov25,{string,int,string,int});
define(prepare_log_prov26,{string,int,string,int,int});
define(my_proposal_prov27,{string,string,int});
define(my_proposal_prov28,{string,string,int,int});
define(important_prov29,{string,string,int});
define(pre_prov30,{string,int});
define(disagree_prov31,{string,int,string});
define(post_prov32,{string,int});
define(bad_prov33,{string,int});
define(good_prov34,{string,string,string,int});
define(timer_state_prov35,{string,string,int,int,int,int});
define(timer_state_prov36,{string,string,int,int,int,int});
define(timeout_prov37,{string,string,int});
define(proposal,{string,string,int});
define(clock,{string,string,int,int});
define(crash,{string,string,int,int});
proposal("a","peter",1);
proposal("b","foobar",1);
seed("a",4,1);
seed("b",5,1);
seed("c",6,1);
nodes("a","b",2,1);
nodes("a","c",3,1);
nodes("b","a",1,1);
nodes("b","c",3,1);
nodes("c","a",1,1);
nodes("c","b",2,1);
nodes("a","a",1,1);
nodes("b","b",2,1);
nodes("c","c",3,1);
timer_svc(A,M,3,NRESERVED) :-  proposal(A,M,NRESERVED), clock(A,A,NRESERVED,_) ;
nodes(A,N,I,MRESERVED) :-  nodes(A,N,I,NRESERVED), clock(A,_,NRESERVED,MRESERVED) ;
seed(A,S,MRESERVED) :-  seed(A,S,NRESERVED), clock(A,_,NRESERVED,MRESERVED),notin update_seed(A,NRESERVED) ;
seed(A,S+C,MRESERVED) :-  seed(A,S,NRESERVED), update_seed(A,NRESERVED), agent_cnt(A,C,NRESERVED), clock(A,_,NRESERVED,MRESERVED) ;
prepare(B,A,S,M,MRESERVED) :-  proposal(A,M,NRESERVED), seed(A,S,NRESERVED), nodes(A,B,_,NRESERVED), clock(A,B,NRESERVED,MRESERVED) ;
update_seed(A,NRESERVED) :-  proposal(A,_,NRESERVED), clock(A,A,NRESERVED,_) ;
redo(A,M,NRESERVED) :-  timeout(A,M,NRESERVED), clock(A,A,NRESERVED,_),notin accepted(A,_,M,NRESERVED) ;
prepare(B,A,S,M,MRESERVED) :-  redo(A,M,NRESERVED), seed(A,S,NRESERVED), nodes(A,B,_,NRESERVED), clock(A,B,NRESERVED,MRESERVED) ;
timer_svc(A,M,3,NRESERVED) :-  redo(A,M,NRESERVED), clock(A,A,NRESERVED,_) ;
update_seed(A,NRESERVED) :-  redo(A,M,NRESERVED), clock(A,A,NRESERVED,_) ;
response_log(C,A,S,O,Os,NRESERVED) :-  prepare_response(C,A,S,O,Os,NRESERVED), clock(C,C,NRESERVED,_) ;
response_log(C,A,S,O,M,MRESERVED) :-  response_log(C,A,S,O,M,NRESERVED), clock(C,_,NRESERVED,MRESERVED) ;
response_cnt(C,S,count<I>,NRESERVED) :-  response_cnt_vars(C,S,I,_,_,_,NRESERVED) ;
best(C,S,max<Os>,NRESERVED) :-  best_vars(C,S,Os,_,_,NRESERVED) ;
what(C,I,NRESERVED) :-  nodes(C,_,I,NRESERVED), clock(C,C,NRESERVED,_) ;
agent_cnt(C,count<I>,NRESERVED) :-  agent_cnt_vars(C,I,NRESERVED) ;
accept(A,S,O,MRESERVED) :-  agent_cnt(C,Cnt1,NRESERVED), response_cnt(C,S,Cnt2,NRESERVED), response_log(C,_,S,O,Os,NRESERVED), best(C,S,Os,NRESERVED), nodes(C,A,_,NRESERVED), clock(C,A,NRESERVED,MRESERVED),Os!=1,Cnt2>Cnt1/2 ;
accept(A,S,P,MRESERVED) :-  agent_cnt(C,Cnt1,NRESERVED), response_cnt(C,S,Cnt2,NRESERVED), response_log(C,_,S,O,Os,NRESERVED), best(C,S,Os,NRESERVED), my_proposal(C,P,NRESERVED), nodes(C,A,_,NRESERVED), clock(C,A,NRESERVED,MRESERVED),Os==1,Cnt2>Cnt1/2 ;
dominated(A,S,NRESERVED) :-  prepare(A,_,S,_,NRESERVED), prepare_log(A,S2,_,NRESERVED), clock(A,A,NRESERVED,_),S2>S ;
can_respond(A,C,S,M,NRESERVED) :-  prepare(A,C,S,M,NRESERVED), clock(A,A,NRESERVED,_),notin dominated(A,S,NRESERVED) ;
prepare_response(C,A,S,O,Os,MRESERVED) :-  can_respond(A,C,S,M,NRESERVED), accepted(A,Os,O,NRESERVED), highest_accepted(A,Os,NRESERVED), clock(A,C,NRESERVED,MRESERVED) ;
prepare_response(C,A,S,"anything",1,MRESERVED) :-  can_respond(A,C,S,M,NRESERVED), clock(A,C,NRESERVED,MRESERVED),notin accepted(A,_,_,NRESERVED) ;
highest_accepted(A,max<S>,NRESERVED) :-  highest_accepted_vars(A,S,NRESERVED) ;
accepted(A,S,M,NRESERVED) :-  accept(A,S,M,NRESERVED), clock(A,A,NRESERVED,_) ;
accepted(A,S,M,MRESERVED) :-  accepted(A,S,M,NRESERVED), clock(A,_,NRESERVED,MRESERVED) ;
prepare_log(A,S,M,NRESERVED) :-  prepare(A,_,S,M,NRESERVED), clock(A,A,NRESERVED,_) ;
prepare_log(A,S,M,MRESERVED) :-  prepare_log(A,S,M,NRESERVED), clock(A,_,NRESERVED,MRESERVED) ;
my_proposal(A,P,NRESERVED) :-  proposal(A,P,NRESERVED), clock(A,A,NRESERVED,_) ;
my_proposal(A,P,MRESERVED) :-  my_proposal(A,P,NRESERVED), clock(A,_,NRESERVED,MRESERVED) ;
important(A,M,NRESERVED) :-  accepted(A,_,M,NRESERVED), clock(A,A,NRESERVED,_),notin crash(A,A,_,NRESERVED) ;
pre(M,NRESERVED) :-  important(_,M,NRESERVED), clock(_,_,NRESERVED,_) ;
disagree(M,NRESERVED) :-  important(_,M,NRESERVED), important(_,N,NRESERVED), clock(_,_,NRESERVED,_),M!=N ;
post(M,NRESERVED) :-  important(_,M,NRESERVED), clock(_,_,NRESERVED,_),notin disagree(M,NRESERVED) ;
bad(A,NRESERVED) :-  important(A,"peter",NRESERVED), important(_,"foobar",NRESERVED), clock(A,A,NRESERVED,_) ;
good("yay",NRESERVED) :-  important(A,M,NRESERVED), clock(A,A,NRESERVED,_),notin bad(A,NRESERVED) ;
timer_state(H,I,T-1,MRESERVED) :-  timer_svc(H,I,T,NRESERVED), clock(H,_,NRESERVED,MRESERVED) ;
timer_state(H,I,T-1,MRESERVED) :-  timer_state(H,I,T,NRESERVED), clock(H,_,NRESERVED,MRESERVED),notin timer_cancel(H,I,NRESERVED),T>1 ;
timeout(H,I,NRESERVED) :-  timer_state(H,I,1,NRESERVED), clock(H,H,NRESERVED,_) ;
timer_svc_prov0(A,M,3,NRESERVED) :-  proposal(A,M,NRESERVED), clock(A,A,NRESERVED,_) ;
nodes_prov1(A,N,I,NRESERVED,MRESERVED) :-  nodes(A,N,I,NRESERVED), clock(A,_,NRESERVED,MRESERVED) ;
seed_prov2(A,S,NRESERVED,MRESERVED) :-  seed(A,S,NRESERVED), clock(A,_,NRESERVED,MRESERVED),notin update_seed(A,NRESERVED) ;
seed_prov3(A,S+C,S,NRESERVED,C,MRESERVED) :-  seed(A,S,NRESERVED), update_seed(A,NRESERVED), agent_cnt(A,C,NRESERVED), clock(A,_,NRESERVED,MRESERVED) ;
prepare_prov4(B,A,S,M,NRESERVED,MRESERVED) :-  proposal(A,M,NRESERVED), seed(A,S,NRESERVED), nodes(A,B,_,NRESERVED), clock(A,B,NRESERVED,MRESERVED) ;
update_seed_prov5(A,NRESERVED) :-  proposal(A,_,NRESERVED), clock(A,A,NRESERVED,_) ;
redo_prov6(A,M,NRESERVED) :-  timeout(A,M,NRESERVED), clock(A,A,NRESERVED,_),notin accepted(A,_,M,NRESERVED) ;
prepare_prov7(B,A,S,M,NRESERVED,MRESERVED) :-  redo(A,M,NRESERVED), seed(A,S,NRESERVED), nodes(A,B,_,NRESERVED), clock(A,B,NRESERVED,MRESERVED) ;
timer_svc_prov8(A,M,3,NRESERVED) :-  redo(A,M,NRESERVED), clock(A,A,NRESERVED,_) ;
update_seed_prov9(A,M,NRESERVED) :-  redo(A,M,NRESERVED), clock(A,A,NRESERVED,_) ;
response_log_prov10(C,A,S,O,Os,NRESERVED) :-  prepare_response(C,A,S,O,Os,NRESERVED), clock(C,C,NRESERVED,_) ;
response_log_prov11(C,A,S,O,M,NRESERVED,MRESERVED) :-  response_log(C,A,S,O,M,NRESERVED), clock(C,_,NRESERVED,MRESERVED) ;
response_cnt_vars(C,S,I,A,O,Os,NRESERVED) :-  response_log(C,A,S,O,Os,NRESERVED), nodes(C,A,I,NRESERVED), clock(C,C,NRESERVED,_) ;
response_cnt_prov12(C,S,count<I>,NRESERVED) :-  response_cnt_vars(C,S,I,_,_,_,NRESERVED) ;
best_vars(C,S,Os,A,O,NRESERVED) :-  response_log(C,A,S,O,Os,NRESERVED), clock(C,C,NRESERVED,_) ;
best_prov13(C,S,max<Os>,NRESERVED) :-  best_vars(C,S,Os,_,_,NRESERVED) ;
what_prov14(C,I,NRESERVED) :-  nodes(C,_,I,NRESERVED), clock(C,C,NRESERVED,_) ;
agent_cnt_vars(C,I,NRESERVED) :-  what(C,I,NRESERVED), clock(C,C,NRESERVED,_) ;
agent_cnt_prov15(C,count<I>,NRESERVED) :-  agent_cnt_vars(C,I,NRESERVED) ;
accept_prov16(A,S,O,C,Cnt1,NRESERVED,Cnt2,Os,MRESERVED) :-  agent_cnt(C,Cnt1,NRESERVED), response_cnt(C,S,Cnt2,NRESERVED), response_log(C,_,S,O,Os,NRESERVED), best(C,S,Os,NRESERVED), nodes(C,A,_,NRESERVED), clock(C,A,NRESERVED,MRESERVED),Os!=1,Cnt2>Cnt1/2 ;
accept_prov17(A,S,P,C,Cnt1,NRESERVED,Cnt2,O,Os,MRESERVED) :-  agent_cnt(C,Cnt1,NRESERVED), response_cnt(C,S,Cnt2,NRESERVED), response_log(C,_,S,O,Os,NRESERVED), best(C,S,Os,NRESERVED), my_proposal(C,P,NRESERVED), nodes(C,A,_,NRESERVED), clock(C,A,NRESERVED,MRESERVED),Os==1,Cnt2>Cnt1/2 ;
dominated_prov18(A,S,NRESERVED,S2) :-  prepare(A,_,S,_,NRESERVED), prepare_log(A,S2,_,NRESERVED), clock(A,A,NRESERVED,_),S2>S ;
can_respond_prov19(A,C,S,M,NRESERVED) :-  prepare(A,C,S,M,NRESERVED), clock(A,A,NRESERVED,_),notin dominated(A,S,NRESERVED) ;
prepare_response_prov20(C,A,S,O,Os,M,NRESERVED,MRESERVED) :-  can_respond(A,C,S,M,NRESERVED), accepted(A,Os,O,NRESERVED), highest_accepted(A,Os,NRESERVED), clock(A,C,NRESERVED,MRESERVED) ;
prepare_response_prov21(C,A,S,"anything",1,M,NRESERVED,MRESERVED) :-  can_respond(A,C,S,M,NRESERVED), clock(A,C,NRESERVED,MRESERVED),notin accepted(A,_,_,NRESERVED) ;
highest_accepted_vars(A,S,NRESERVED) :-  accepted(A,S,_,NRESERVED), clock(A,A,NRESERVED,_) ;
highest_accepted_prov22(A,max<S>,NRESERVED) :-  highest_accepted_vars(A,S,NRESERVED) ;
accepted_prov23(A,S,M,NRESERVED) :-  accept(A,S,M,NRESERVED), clock(A,A,NRESERVED,_) ;
accepted_prov24(A,S,M,NRESERVED,MRESERVED) :-  accepted(A,S,M,NRESERVED), clock(A,_,NRESERVED,MRESERVED) ;
prepare_log_prov25(A,S,M,NRESERVED) :-  prepare(A,_,S,M,NRESERVED), clock(A,A,NRESERVED,_) ;
prepare_log_prov26(A,S,M,NRESERVED,MRESERVED) :-  prepare_log(A,S,M,NRESERVED), clock(A,_,NRESERVED,MRESERVED) ;
my_proposal_prov27(A,P,NRESERVED) :-  proposal(A,P,NRESERVED), clock(A,A,NRESERVED,_) ;
my_proposal_prov28(A,P,NRESERVED,MRESERVED) :-  my_proposal(A,P,NRESERVED), clock(A,_,NRESERVED,MRESERVED) ;
important_prov29(A,M,NRESERVED) :-  accepted(A,_,M,NRESERVED), clock(A,A,NRESERVED,_),notin crash(A,A,_,NRESERVED) ;
pre_prov30(M,NRESERVED) :-  important(_,M,NRESERVED), clock(_,_,NRESERVED,_) ;
disagree_prov31(M,NRESERVED,N) :-  important(_,M,NRESERVED), important(_,N,NRESERVED), clock(_,_,NRESERVED,_),M!=N ;
post_prov32(M,NRESERVED) :-  important(_,M,NRESERVED), clock(_,_,NRESERVED,_),notin disagree(M,NRESERVED) ;
bad_prov33(A,NRESERVED) :-  important(A,"peter",NRESERVED), important(_,"foobar",NRESERVED), clock(A,A,NRESERVED,_) ;
good_prov34("yay",A,M,NRESERVED) :-  important(A,M,NRESERVED), clock(A,A,NRESERVED,_),notin bad(A,NRESERVED) ;
timer_state_prov35(H,I,T-1,T,NRESERVED,MRESERVED) :-  timer_svc(H,I,T,NRESERVED), clock(H,_,NRESERVED,MRESERVED) ;
timer_state_prov36(H,I,T-1,T,NRESERVED,MRESERVED) :-  timer_state(H,I,T,NRESERVED), clock(H,_,NRESERVED,MRESERVED),notin timer_cancel(H,I,NRESERVED),T>1 ;
timeout_prov37(H,I,NRESERVED) :-  timer_state(H,I,1,NRESERVED), clock(H,H,NRESERVED,_) ;
crash("NULL","NULL",99999999,99999999);
clock("a","a",1,2);
clock("a","b",1,2);
clock("a","c",1,2);
clock("b","a",1,2);
clock("b","b",1,2);
clock("b","c",1,2);
clock("c","a",1,2);
clock("c","b",1,2);
clock("c","c",1,2);
clock("a","a",2,3);
clock("a","b",2,3);
clock("a","c",2,3);
clock("b","a",2,3);
clock("b","b",2,3);
clock("b","c",2,3);
clock("c","a",2,3);
clock("c","b",2,3);
clock("c","c",2,3);
clock("a","a",3,4);
clock("a","b",3,4);
clock("a","c",3,4);
clock("b","a",3,4);
clock("b","b",3,4);
clock("b","c",3,4);
clock("c","a",3,4);
clock("c","b",3,4);
clock("c","c",3,4);
clock("a","a",4,5);
clock("a","b",4,5);
clock("a","c",4,5);
clock("b","a",4,5);
clock("b","b",4,5);
clock("b","c",4,5);
clock("c","a",4,5);
clock("c","b",4,5);
clock("c","c",4,5);
