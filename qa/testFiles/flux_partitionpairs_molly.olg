define(conn_prov17, {string, string, string, int, int});
define(send, {string, string, int, string, int});
define(watch_state_prov36, {string, string, int, int, int, int});
define(put_log_prov2, {string, string, int, int, int});
define(good, {string, int, int});
define(heartbeat_prov40, {string, string, int, int, int});
define(advanced_prov33, {string, string, int, int, int});
define(watch, {string, string, int});
define(post, {string, int});
define(bot_vars, {string, string, int, int});
define(crash, {string, string, int, int});
define(del_conn, {string, string, string, int});
define(hb_state_prov39, {string, string, int, int, int});
define(acked_prov31, {string, string, int, string, int, int});
define(status_prov16, {string, string, string, int, int});
define(hb_state, {string, string, int, int});
define(watch_state, {string, string, int, int});
define(buf_prov29, {string, string, int, int, int, int});
define(ack, {string, string, int, string, int});
define(fail_event, {string, string, string, int});
define(hb_log_prov43, {string, string, int, int, int});
define(fail_event_prov24, {string, string, string, int});
define(acked_prov30, {string, string, int, string, int});
define(event_2, {string, string, int});
define(t_fail_prov19, {string, int});
define(conn_prov14, {string, string, string, int, int});
define(other_prov22, {string, string, string, int, int});
define(del, {string, string, int});
define(member, {string, string, int});
define(hb_req, {string, string, int});
define(aggs_prov47, {string, string, int, int});
define(pre, {string, int});
define(fail_log_prov25, {string, string, string, int, int});
define(hb_state_prov41, {string, string, int, int, int, int});
define(put_log, {string, string, int, int});
define(aggs_vars, {string, string, int, int});
define(conn, {string, string, string, int});
define(consumer_prov0, {string, int, int});
define(dispatch, {string, string, int, string, int});
define(other, {string, string, string, int});
define(advance_prov8, {string, string, int});
define(fail_prov27, {string, string, int, string, int});
define(buf, {string, string, int, int, int});
define(reverse, {string, string, int});
define(post_prov5, {string, int});
define(reverse_prov15, {string, string, int, int});
define(advance, {string, string, int});
define(event_1, {string, string, int});
define(status_prov13, {string, string, string, int, int});
define(good_prov3, {string, int, string, int});
define(bot, {string, string, int, int});
define(event_1_prov11, {string, string, int});
define(put_prov21, {string, string, int, int, int});
define(member_prov23, {string, string, int, int});
define(dispatch_prov6, {string, string, int, string, int});
define(peek, {string, string, int, string, int});
define(fail, {string, string, int});
define(event_2_prov12, {string, string, string, int});
define(hb_req_prov38, {string, string, int, int});
define(fail_log_prov26, {string, string, string, int, int});
define(pre_prov4, {string, int});
define(aggs, {string, string, int, int});
define(status, {string, string, string, int});
define(bot_prov45, {string, string, int, int});
define(t_fail, {string, int});
define(failed, {string, string, int});
define(peek_prov34, {string, string, int, string, int});
define(failed_prov44, {string, string, int, int, int});
define(fail_log, {string, string, string, int});
define(advanced, {string, string, int, int});
define(buf_prov28, {string, string, int, int, int});
define(heartbeat, {string, string, int, int});
define(acked, {string, string, int, string, int});
define(clock, {string, string, int, int});
define(reset, {string, string, int});
define(dest_prov35, {string, string, int, int});
define(ack_prov10, {string, string, int, string, int});
define(conn_prov18, {string, string, string, int});
define(aggs_vars_prov48, {string, string, int, int});
define(advanced_prov32, {string, string, int, int, int});
define(consumer, {string, int});
define(ack_prov9, {string, string, int, string, int});
define(del_prov20, {string, string, int, int});
define(put_log_prov1, {string, string, int, int});
define(hb_log, {string, string, int, int});
define(bot_vars_prov46, {string, string, int, int});
define(hb_log_prov42, {string, string, int, int});
define(send_prov7, {string, string, int, string, int, int});
define(put, {string, string, int, int, int});
define(watch_state_prov37, {string, string, int, int});
define(dest, {string, string, int});
conn("fpp", "fcp", "SEND", 1);
conn("fpp", "fcs", "ACK", 1);
status("fpp", "fcp", "ACTIVE", 1);
status("fpp", "fcs", "ACTIVE", 1);
del("fpp", "PRIM|SEC", 1);
dest("fpp", "fcp", 1);
conn("fps", "fcs", "SEND", 1);
conn("fps", "fcp", "ACK", 1);
status("fps", "fcs", "ACTIVE", 1);
status("fps", "fcp", "ACTIVE", 1);
del("fps", "PRIM|SEC", 1);
dest("fps", "fcs", 1);
conn("fcp", "fps", "SEND", 1);
status("fcp", "fps", "ACTIVE", 1);
del("fcp", "PRIM|SEC", 1);
dest("fcp", "fps", 1);
conn("fcs", "fpp", "SEND", 1);
status("fcs", "fpp", "ACTIVE", 1);
del("fcs", "PRIM|SEC", 1);
dest("fcs", "fpp", 1);
other("fpp", "fpp", "fps", 1);
other("fpp", "fps", "fpp", 1);
other("fpp", "fcp", "fcs", 1);
other("fpp", "fcs", "fcp", 1);
other("fps", "fpp", "fps", 1);
other("fps", "fps", "fpp", 1);
other("fps", "fcp", "fcs", 1);
other("fps", "fcs", "fcp", 1);
other("fcp", "fpp", "fps", 1);
other("fcp", "fps", "fpp", 1);
other("fcp", "fcp", "fcs", 1);
other("fcp", "fcs", "fcp", 1);
other("fcs", "fpp", "fps", 1);
other("fcs", "fps", "fpp", 1);
other("fcs", "fcp", "fcs", 1);
other("fcs", "fcs", "fcp", 1);
watch("Z", "fpp", 1);
watch("Z", "fcp", 1);
watch("Z", "fps", 1);
watch("Z", "fcs", 1);
member("Z", "fpp", 1);
member("Z", "fps", 1);
member("Z", "fcp", 1);
member("Z", "fcs", 1);
put("fpp", "foo", 1, 0, 1);
put("fpp", "bar", 2, 0, 1);
put("fpp", "baz", 3, 0, 1);
put("fpp", "qux", 4, 0, 2);
put("fps", "foo", 1, 0, 1);
put("fps", "bar", 2, 0, 1);
put("fps", "baz", 3, 0, 1);
put("fps", "qux", 4, 0, 2);
consumer("fcs", 1);
consumer("fcp", 1);
consumer(X, NRESERVED + 1) :- consumer(X, NRESERVED), clock(X, _, NRESERVED, _);
put_log(E, X, I, NRESERVED) :- put(E, X, I, _, NRESERVED), consumer(E, NRESERVED), clock(E, E, NRESERVED, _);
put_log(E, X, I, NRESERVED + 1) :- put_log(E, X, I, NRESERVED), clock(E, _, NRESERVED, _);
good(X, I, NRESERVED) :- put_log(E, X, I, NRESERVED), clock(E, E, NRESERVED, _);
pre(X, NRESERVED) :- put(_, X, _, _, 1), clock(_, _, NRESERVED, _);
post(X, NRESERVED) :- good(X, I, NRESERVED), clock(X, X, NRESERVED, _);
dispatch(Host, Dest, Sn, Data, NRESERVED) :- peek(Host, Dest, Sn, Data, NRESERVED), status(Host, Dest, "ACTIVE", NRESERVED), conn(Host, Dest, "SEND", NRESERVED), clock(Host, Host, NRESERVED, _);
send(Dest, Host, Sn, Data, MRESERVED) :- dispatch(Host, Dest, Sn, Data, NRESERVED), clock(Host, Dest, NRESERVED, MRESERVED);
advance(Host, Dest, NRESERVED) :- dispatch(Host, Dest, _, _, NRESERVED), clock(Host, Host, NRESERVED, _);
ack(Host, Dest, Sn, Markings, NRESERVED) :- dispatch(Host, Dest, Sn, _, NRESERVED), del(Host, Markings, NRESERVED), clock(Host, Host, NRESERVED, _), notin conn(Host, Dest, "ACK", NRESERVED);
ack(Host, Dest, Sn, Markings, NRESERVED) :- dispatch(Host, Dest, Sn, _, NRESERVED), del(Host, Markings, NRESERVED), send(Host, Dest, Sn, _, NRESERVED), clock(Host, Host, NRESERVED, _);
event_1(Host, Dest, NRESERVED) :- fail(Host, Dest, NRESERVED), clock(Host, Host, NRESERVED, _), notin status(Host, Dest, "DEAD", NRESERVED);
event_2(Host, Other, NRESERVED) :- event_1(Host, Dest, NRESERVED), other(Host, Dest, Other, NRESERVED), clock(Host, Host, NRESERVED, _), notin conn(Host, Other, "RECV", NRESERVED);
status(Host, Dest, "DEAD", NRESERVED + 1) :- event_1(Host, Dest, NRESERVED), clock(Host, _, NRESERVED, _);
conn(Host, Dest, "RECV", NRESERVED + 1) :- event_2(Host, Dest, NRESERVED), clock(Host, _, NRESERVED, _);
reverse(Other, Host, MRESERVED) :- event_2(Host, Other, NRESERVED), clock(Host, Other, NRESERVED, MRESERVED);
status(H, D, S, NRESERVED + 1) :- status(H, D, S, NRESERVED), clock(H, _, NRESERVED, _), notin event_1(H, D, NRESERVED);
conn(H, D, S, NRESERVED + 1) :- conn(H, D, S, NRESERVED), clock(H, _, NRESERVED, _), notin del_conn(H, D, S, NRESERVED);
conn(Host, Dest, "SEND", NRESERVED) :- reverse(Host, Dest, NRESERVED), clock(Host, Host, NRESERVED, _);
t_fail(Host, NRESERVED) :- fail(Host, _, NRESERVED), clock(Host, Host, NRESERVED, _);
del(H, M, NRESERVED + 1) :- del(H, M, NRESERVED), clock(H, _, NRESERVED, _);
put(H, D, S, 0, NRESERVED) :- send(H, _, S, D, NRESERVED), clock(H, H, NRESERVED, _);
other(H, A, B, NRESERVED + 1) :- other(H, A, B, NRESERVED), clock(H, _, NRESERVED, _);
member(Z, N, NRESERVED + 1) :- member(Z, N, NRESERVED), clock(Z, _, NRESERVED, _);
fail_event(Z, N, H, NRESERVED) :- failed(Z, H, NRESERVED), member(Z, N, NRESERVED), clock(Z, Z, NRESERVED, _);
fail_log(Z, N, H, NRESERVED + 1) :- fail_event(Z, N, H, NRESERVED), clock(Z, _, NRESERVED, _);
fail_log(Z, N, H, NRESERVED + 1) :- fail_log(Z, N, H, NRESERVED), clock(Z, _, NRESERVED, _);
fail(N, H, MRESERVED) :- fail_event(Z, N, H, NRESERVED), clock(Z, N, NRESERVED, MRESERVED), notin fail_log(Z, N, H, NRESERVED);
buf(Host, Data, Sn, Markings, NRESERVED) :- put(Host, Data, Sn, Markings, NRESERVED), clock(Host, Host, NRESERVED, _);
buf(H, D, S, M, NRESERVED + 1) :- buf(H, D, S, M, NRESERVED), clock(H, _, NRESERVED, _), notin reset(H, D, NRESERVED);
acked(H, Dest, Sn, Markings, NRESERVED) :- ack(H, Dest, Sn, Markings, NRESERVED), clock(H, H, NRESERVED, _);
acked(H, Dest, Sn, M, NRESERVED + 1) :- acked(H, Dest, Sn, M, NRESERVED), clock(H, _, NRESERVED, _);
advanced(H, D, Sn, NRESERVED + 1) :- advance(H, D, NRESERVED), bot(H, D, Sn, NRESERVED), clock(H, _, NRESERVED, _);
advanced(H, D, S, NRESERVED + 1) :- advanced(H, D, S, NRESERVED), clock(H, _, NRESERVED, _);
peek(H, Dest, Sn, Data, NRESERVED) :- bot(H, Dest, Sn, NRESERVED), buf(H, Data, Sn, _, NRESERVED), clock(H, H, NRESERVED, _);
dest(H, D, NRESERVED + 1) :- dest(H, D, NRESERVED), clock(H, _, NRESERVED, _);
watch_state(F, H, S + 1, NRESERVED + 1) :- watch_state(F, H, S, NRESERVED), clock(F, _, NRESERVED, _);
watch_state(F, H, 0, NRESERVED) :- watch(F, H, NRESERVED), clock(F, F, NRESERVED, _);
hb_req(F, H, MRESERVED) :- watch_state(H, F, _, NRESERVED), clock(H, F, NRESERVED, MRESERVED), notin hb_log(H, F, _, NRESERVED);
hb_state(F, H, 0, NRESERVED + 1) :- hb_req(F, H, NRESERVED), clock(F, _, NRESERVED, _), notin hb_state(F, H, _, NRESERVED);
heartbeat(H, F, N, MRESERVED) :- hb_state(F, H, N, NRESERVED), clock(F, H, NRESERVED, MRESERVED);
hb_state(F, H, N + 1, NRESERVED + 1) :- hb_state(F, H, N, NRESERVED), clock(F, _, NRESERVED, _);
hb_log(H, F, N, NRESERVED) :- heartbeat(H, F, N, NRESERVED), clock(H, H, NRESERVED, _);
hb_log(H, F, N, NRESERVED + 1) :- hb_log(H, F, N, NRESERVED), clock(H, _, NRESERVED, _);
failed(H, F, NRESERVED) :- aggs(H, F, M, NRESERVED), watch_state(H, F, S, NRESERVED), S > M + 3, clock(H, H, NRESERVED, _);
bot(H, Dest, min<Sn>, NRESERVED) :- bot_vars(H, Dest, Sn, NRESERVED);
bot_vars(H, Dest, Sn, NRESERVED) :- buf(H, _, Sn, _, NRESERVED), dest(H, Dest, NRESERVED), clock(H, H, NRESERVED, _), notin advanced(H, Dest, Sn, NRESERVED);
aggs(H, F, max<N>, NRESERVED) :- aggs_vars(H, F, N, NRESERVED);
aggs_vars(H, F, N, NRESERVED) :- hb_log(H, F, N, NRESERVED), clock(H, H, NRESERVED, _);
consumer_prov0(X, NRESERVED, NRESERVED + 1) :- consumer(X, NRESERVED), clock(X, _, NRESERVED, _);
put_log_prov1(E, X, I, NRESERVED) :- put(E, X, I, _, NRESERVED), consumer(E, NRESERVED), clock(E, E, NRESERVED, _);
put_log_prov2(E, X, I, NRESERVED, NRESERVED + 1) :- put_log(E, X, I, NRESERVED), clock(E, _, NRESERVED, _);
good_prov3(X, I, E, NRESERVED) :- put_log(E, X, I, NRESERVED), clock(E, E, NRESERVED, _);
pre_prov4(X, NRESERVED) :- put(_, X, _, _, 1), clock(_, _, NRESERVED, _);
post_prov5(X, NRESERVED) :- good(X, I, NRESERVED), clock(X, X, NRESERVED, _);
dispatch_prov6(Host, Dest, Sn, Data, NRESERVED) :- peek(Host, Dest, Sn, Data, NRESERVED), status(Host, Dest, "ACTIVE", NRESERVED), conn(Host, Dest, "SEND", NRESERVED), clock(Host, Host, NRESERVED, _);
send_prov7(Dest, Host, Sn, Data, NRESERVED, MRESERVED) :- dispatch(Host, Dest, Sn, Data, NRESERVED), clock(Host, Dest, NRESERVED, MRESERVED);
advance_prov8(Host, Dest, NRESERVED) :- dispatch(Host, Dest, _, _, NRESERVED), clock(Host, Host, NRESERVED, _);
ack_prov9(Host, Dest, Sn, Markings, NRESERVED) :- dispatch(Host, Dest, Sn, _, NRESERVED), del(Host, Markings, NRESERVED), clock(Host, Host, NRESERVED, _), notin conn(Host, Dest, "ACK", NRESERVED);
ack_prov10(Host, Dest, Sn, Markings, NRESERVED) :- dispatch(Host, Dest, Sn, _, NRESERVED), del(Host, Markings, NRESERVED), send(Host, Dest, Sn, _, NRESERVED), clock(Host, Host, NRESERVED, _);
event_1_prov11(Host, Dest, NRESERVED) :- fail(Host, Dest, NRESERVED), clock(Host, Host, NRESERVED, _), notin status(Host, Dest, "DEAD", NRESERVED);
event_2_prov12(Host, Other, Dest, NRESERVED) :- event_1(Host, Dest, NRESERVED), other(Host, Dest, Other, NRESERVED), clock(Host, Host, NRESERVED, _), notin conn(Host, Other, "RECV", NRESERVED);
status_prov13(Host, Dest, "DEAD", NRESERVED, NRESERVED + 1) :- event_1(Host, Dest, NRESERVED), clock(Host, _, NRESERVED, _);
conn_prov14(Host, Dest, "RECV", NRESERVED, NRESERVED + 1) :- event_2(Host, Dest, NRESERVED), clock(Host, _, NRESERVED, _);
reverse_prov15(Other, Host, NRESERVED, MRESERVED) :- event_2(Host, Other, NRESERVED), clock(Host, Other, NRESERVED, MRESERVED);
status_prov16(H, D, S, NRESERVED, NRESERVED + 1) :- status(H, D, S, NRESERVED), clock(H, _, NRESERVED, _), notin event_1(H, D, NRESERVED);
conn_prov17(H, D, S, NRESERVED, NRESERVED + 1) :- conn(H, D, S, NRESERVED), clock(H, _, NRESERVED, _), notin del_conn(H, D, S, NRESERVED);
conn_prov18(Host, Dest, "SEND", NRESERVED) :- reverse(Host, Dest, NRESERVED), clock(Host, Host, NRESERVED, _);
t_fail_prov19(Host, NRESERVED) :- fail(Host, _, NRESERVED), clock(Host, Host, NRESERVED, _);
del_prov20(H, M, NRESERVED, NRESERVED + 1) :- del(H, M, NRESERVED), clock(H, _, NRESERVED, _);
put_prov21(H, D, S, 0, NRESERVED) :- send(H, _, S, D, NRESERVED), clock(H, H, NRESERVED, _);
other_prov22(H, A, B, NRESERVED, NRESERVED + 1) :- other(H, A, B, NRESERVED), clock(H, _, NRESERVED, _);
member_prov23(Z, N, NRESERVED, NRESERVED + 1) :- member(Z, N, NRESERVED), clock(Z, _, NRESERVED, _);
fail_event_prov24(Z, N, H, NRESERVED) :- failed(Z, H, NRESERVED), member(Z, N, NRESERVED), clock(Z, Z, NRESERVED, _);
fail_log_prov25(Z, N, H, NRESERVED, NRESERVED + 1) :- fail_event(Z, N, H, NRESERVED), clock(Z, _, NRESERVED, _);
fail_log_prov26(Z, N, H, NRESERVED, NRESERVED + 1) :- fail_log(Z, N, H, NRESERVED), clock(Z, _, NRESERVED, _);
fail_prov27(N, H, NRESERVED, Z, MRESERVED) :- fail_event(Z, N, H, NRESERVED), clock(Z, N, NRESERVED, MRESERVED), notin fail_log(Z, N, H, NRESERVED);
buf_prov28(Host, Data, Sn, Markings, NRESERVED) :- put(Host, Data, Sn, Markings, NRESERVED), clock(Host, Host, NRESERVED, _);
buf_prov29(H, D, S, M, NRESERVED, NRESERVED + 1) :- buf(H, D, S, M, NRESERVED), clock(H, _, NRESERVED, _), notin reset(H, D, NRESERVED);
acked_prov30(H, Dest, Sn, Markings, NRESERVED) :- ack(H, Dest, Sn, Markings, NRESERVED), clock(H, H, NRESERVED, _);
acked_prov31(H, Dest, Sn, M, NRESERVED, NRESERVED + 1) :- acked(H, Dest, Sn, M, NRESERVED), clock(H, _, NRESERVED, _);
advanced_prov32(H, D, Sn, NRESERVED, NRESERVED + 1) :- advance(H, D, NRESERVED), bot(H, D, Sn, NRESERVED), clock(H, _, NRESERVED, _);
advanced_prov33(H, D, S, NRESERVED, NRESERVED + 1) :- advanced(H, D, S, NRESERVED), clock(H, _, NRESERVED, _);
peek_prov34(H, Dest, Sn, Data, NRESERVED) :- bot(H, Dest, Sn, NRESERVED), buf(H, Data, Sn, _, NRESERVED), clock(H, H, NRESERVED, _);
dest_prov35(H, D, NRESERVED, NRESERVED + 1) :- dest(H, D, NRESERVED), clock(H, _, NRESERVED, _);
watch_state_prov36(F, H, S + 1, S, NRESERVED, NRESERVED + 1) :- watch_state(F, H, S, NRESERVED), clock(F, _, NRESERVED, _);
watch_state_prov37(F, H, 0, NRESERVED) :- watch(F, H, NRESERVED), clock(F, F, NRESERVED, _);
hb_req_prov38(F, H, NRESERVED, MRESERVED) :- watch_state(H, F, _, NRESERVED), clock(H, F, NRESERVED, MRESERVED), notin hb_log(H, F, _, NRESERVED);
hb_state_prov39(F, H, 0, NRESERVED, NRESERVED + 1) :- hb_req(F, H, NRESERVED), clock(F, _, NRESERVED, _), notin hb_state(F, H, _, NRESERVED);
heartbeat_prov40(H, F, N, NRESERVED, MRESERVED) :- hb_state(F, H, N, NRESERVED), clock(F, H, NRESERVED, MRESERVED);
hb_state_prov41(F, H, N + 1, N, NRESERVED, NRESERVED + 1) :- hb_state(F, H, N, NRESERVED), clock(F, _, NRESERVED, _);
hb_log_prov42(H, F, N, NRESERVED) :- heartbeat(H, F, N, NRESERVED), clock(H, H, NRESERVED, _);
hb_log_prov43(H, F, N, NRESERVED, NRESERVED + 1) :- hb_log(H, F, N, NRESERVED), clock(H, _, NRESERVED, _);
failed_prov44(H, F, M, S, NRESERVED) :- aggs(H, F, M, NRESERVED), watch_state(H, F, S, NRESERVED), S > M + 3, clock(H, H, NRESERVED, _);
bot_prov45(H, Dest, min<Sn>, NRESERVED) :- bot_vars(H, Dest, Sn, NRESERVED);
bot_vars_prov46(H, Dest, Sn, NRESERVED) :- buf(H, _, Sn, _, NRESERVED), dest(H, Dest, NRESERVED), clock(H, H, NRESERVED, _), notin advanced(H, Dest, Sn, NRESERVED);
aggs_prov47(H, F, max<N>, NRESERVED) :- aggs_vars(H, F, N, NRESERVED);
aggs_vars_prov48(H, F, N, NRESERVED) :- hb_log(H, F, N, NRESERVED), clock(H, H, NRESERVED, _);
clock("a", "a", 1, 2);
clock("b", "b", 1, 2);
clock("c", "c", 1, 2);
clock("a", "a", 1, 2);
clock("a", "b", 1, 2);
clock("a", "c", 1, 2);
clock("b", "a", 1, 2);
clock("b", "b", 1, 2);
clock("b", "c", 1, 2);
clock("c", "a", 1, 2);
clock("c", "b", 1, 2);
clock("c", "c", 1, 2);
clock("a", "a", 2, 3);
clock("b", "b", 2, 3);
clock("c", "c", 2, 3);
clock("a", "a", 2, 3);
clock("a", "b", 2, 3);
clock("a", "c", 2, 3);
clock("b", "a", 2, 3);
clock("b", "b", 2, 3);
clock("b", "c", 2, 3);
clock("c", "a", 2, 3);
clock("c", "b", 2, 3);
clock("c", "c", 2, 3);
clock("a", "a", 3, 4);
clock("b", "b", 3, 4);
clock("c", "c", 3, 4);
clock("a", "a", 3, 4);
clock("a", "b", 3, 4);
clock("a", "c", 3, 4);
clock("b", "a", 3, 4);
clock("b", "b", 3, 4);
clock("b", "c", 3, 4);
clock("c", "a", 3, 4);
clock("c", "b", 3, 4);
clock("c", "c", 3, 4);
clock("a", "a", 4, 5);
clock("b", "b", 4, 5);
clock("c", "c", 4, 5);
clock("a", "a", 4, 5);
clock("a", "b", 4, 5);
clock("a", "c", 4, 5);
clock("b", "a", 4, 5);
clock("b", "b", 4, 5);
clock("b", "c", 4, 5);
clock("c", "a", 4, 5);
clock("c", "b", 4, 5);
clock("c", "c", 4, 5);
