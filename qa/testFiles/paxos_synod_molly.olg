define(timer_svc_prov0, {string, string, int, int});
define(timer_state_prov32, {string, string, int, int, int, int});
define(response_log_prov11, {string, string, int, string, int, int, int});
define(best_vars_prov37, {string, int, string, int, string, int});
define(dominated_prov15, {string, int, int, int});
define(best, {string, int, int, int});
define(timer_state_prov31, {string, string, int, int, int, int});
define(accept, {string, int, string, int});
define(response_cnt_prov34, {string, int, int, int});
define(response_log_prov10, {string, string, int, string, int, int});
define(prepare_prov4, {string, string, int, string, int, int});
define(what_prov12, {string, int, int});
define(prepare, {string, string, int, string, int});
define(accept_prov14, {string, int, string, int, string, int, int, int, int});
define(timer_state, {string, string, int, int});
define(redo, {string, string, int});
define(important, {string, string, int});
define(proposal, {string, string, int});
define(accepted_prov20, {string, int, string, int, int});
define(seed_prov2, {string, int, int, int});
define(can_respond_prov16, {string, string, int, string, int});
define(my_proposal, {string, string, int});
define(disagree, {string, int});
define(highest_accepted_prov40, {string, int, int});
define(prepare_response, {string, string, int, string, int, int});
define(redo_prov6, {string, string, int});
define(bad, {string, int});
define(best_vars, {string, int, string, int, string, int});
define(response_log, {string, string, int, string, int, int});
define(pre_prov26, {string, int});
define(can_respond, {string, string, int, string, int});
define(highest_accepted_vars, {string, int, int});
define(update_seed_prov5, {string, int});
define(timer_svc, {string, string, int, int});
define(disagree_prov27, {string, string, int});
define(timer_cancel, {string, string, int});
define(agent_cnt_vars, {string, int, int});
define(response_cnt_vars_prov35, {string, int, string, int, int, string, int});
define(update_seed_prov9, {string, int});
define(nodes_prov1, {string, string, int, int, int});
define(prepare_response_prov18, {string, string, int, string, int, int, int});
define(good, {string, int});
define(prepare_log, {string, int, string, int});
define(what, {string, int, int});
define(seed, {string, int, int});
define(nodes, {string, string, int, int});
define(highest_accepted_vars_prov41, {string, int, int});
define(timeout_prov33, {string, string, int});
define(dominated, {string, int, int});
define(prepare_prov7, {string, string, int, string, int, int});
define(agent_cnt, {string, int, int});
define(prepare_response_prov17, {string, string, int, string, int, int, int});
define(highest_accepted, {string, int, int});
define(bad_prov29, {string, int});
define(response_cnt_vars, {string, int, string, int, int, string, int});
define(prepare_log_prov22, {string, int, string, int, int});
define(accepted, {string, int, string, int});
define(accepted_prov19, {string, int, string, int});
define(important_prov25, {string, string, int});
define(response_cnt, {string, int, int, int});
define(agent_cnt_prov38, {string, int, int});
define(pre, {string, int});
define(prepare_log_prov21, {string, int, string, int});
define(timeout, {string, string, int});
define(my_proposal_prov23, {string, string, int});
define(my_proposal_prov24, {string, string, int, int});
define(post_prov28, {string, int});
define(seed_prov3, {string, int, int, int, int, int});
define(best_prov36, {string, int, int, int});
define(update_seed, {string, int});
define(clock, {string, string, int, int});
define(good_prov30, {string, string, int});
define(timer_svc_prov8, {string, string, int, int});
define(crash, {string, string, int, int});
define(agent_cnt_vars_prov39, {string, int, int});
define(accept_prov13, {string, int, string, int, string, int, int, int, int});
define(post, {string, int});
proposal("a", "peter", 1);
proposal("b", "foobar", 1);
seed("a", 4, 1);
seed("b", 5, 1);
seed("c", 6, 1);
nodes("a", "b", 2, 1);
nodes("a", "c", 3, 1);
nodes("b", "a", 1, 1);
nodes("b", "c", 3, 1);
nodes("c", "a", 1, 1);
nodes("c", "b", 2, 1);
nodes("a", "a", 1, 1);
nodes("b", "b", 2, 1);
nodes("c", "c", 3, 1);
timer_svc(A, M, 3, NRESERVED) :- proposal(A, M, NRESERVED), clock(A, A, NRESERVED, _);
nodes(A, N, I, NRESERVED + 1) :- nodes(A, N, I, NRESERVED), clock(A, _, NRESERVED, _);
seed(A, S, NRESERVED + 1) :- seed(A, S, NRESERVED), clock(A, _, NRESERVED, _), notin update_seed(A, NRESERVED);
seed(A, S + C, NRESERVED + 1) :- seed(A, S, NRESERVED), update_seed(A, NRESERVED), agent_cnt(A, C, NRESERVED), clock(A, _, NRESERVED, _);
prepare(B, A, S, M, MRESERVED) :- proposal(A, M, NRESERVED), seed(A, S, NRESERVED), nodes(A, B, _, NRESERVED), clock(A, B, NRESERVED, MRESERVED);
update_seed(A, NRESERVED) :- proposal(A, _, NRESERVED), clock(A, A, NRESERVED, _);
redo(A, M, NRESERVED) :- timeout(A, M, NRESERVED), clock(A, A, NRESERVED, _), notin accepted(A, _, M, NRESERVED);
prepare(B, A, S, M, MRESERVED) :- redo(A, M, NRESERVED), seed(A, S, NRESERVED), nodes(A, B, _, NRESERVED), clock(A, B, NRESERVED, MRESERVED);
timer_svc(A, M, 3, NRESERVED) :- redo(A, M, NRESERVED), clock(A, A, NRESERVED, _);
update_seed(A, NRESERVED) :- redo(A, M, NRESERVED), clock(A, A, NRESERVED, _);
response_log(C, A, S, O, Os, NRESERVED) :- prepare_response(C, A, S, O, Os, NRESERVED), clock(C, C, NRESERVED, _);
response_log(C, A, S, O, M, NRESERVED + 1) :- response_log(C, A, S, O, M, NRESERVED), clock(C, _, NRESERVED, _);
what(C, I, NRESERVED) :- nodes(C, _, I, NRESERVED), clock(C, C, NRESERVED, _);
accept(A, S, O, MRESERVED) :- agent_cnt(C, Cnt1, NRESERVED), response_cnt(C, S, Cnt2, NRESERVED), response_log(C, _, S, O, Os, NRESERVED), best(C, S, Os, NRESERVED), nodes(C, A, _, NRESERVED), Os != 1, Cnt2 > Cnt1 / 2, clock(C, A, NRESERVED, MRESERVED);
accept(A, S, P, MRESERVED) :- agent_cnt(C, Cnt1, NRESERVED), response_cnt(C, S, Cnt2, NRESERVED), response_log(C, _, S, O, Os, NRESERVED), best(C, S, Os, NRESERVED), my_proposal(C, P, NRESERVED), nodes(C, A, _, NRESERVED), Os == 1, Cnt2 > Cnt1 / 2, clock(C, A, NRESERVED, MRESERVED);
dominated(A, S, NRESERVED) :- prepare(A, _, S, _, NRESERVED), prepare_log(A, S2, _, NRESERVED), S2 > S, clock(A, A, NRESERVED, _);
can_respond(A, C, S, M, NRESERVED) :- prepare(A, C, S, M, NRESERVED), clock(A, A, NRESERVED, _), notin dominated(A, S, NRESERVED);
prepare_response(C, A, S, O, Os, MRESERVED) :- can_respond(A, C, S, M, NRESERVED), accepted(A, Os, O, NRESERVED), highest_accepted(A, Os, NRESERVED), clock(A, C, NRESERVED, MRESERVED);
prepare_response(C, A, S, "anything", 1, MRESERVED) :- can_respond(A, C, S, M, NRESERVED), clock(A, C, NRESERVED, MRESERVED), notin accepted(A, _, _, NRESERVED);
accepted(A, S, M, NRESERVED) :- accept(A, S, M, NRESERVED), clock(A, A, NRESERVED, _);
accepted(A, S, M, NRESERVED + 1) :- accepted(A, S, M, NRESERVED), clock(A, _, NRESERVED, _);
prepare_log(A, S, M, NRESERVED) :- prepare(A, _, S, M, NRESERVED), clock(A, A, NRESERVED, _);
prepare_log(A, S, M, NRESERVED + 1) :- prepare_log(A, S, M, NRESERVED), clock(A, _, NRESERVED, _);
my_proposal(A, P, NRESERVED) :- proposal(A, P, NRESERVED), clock(A, A, NRESERVED, _);
my_proposal(A, P, NRESERVED + 1) :- my_proposal(A, P, NRESERVED), clock(A, _, NRESERVED, _);
important(A, M, NRESERVED) :- accepted(A, _, M, NRESERVED), clock(A, A, NRESERVED, _), notin crash(A, A, _, NRESERVED);
pre(M, NRESERVED) :- important(_, M, NRESERVED), clock(_, _, NRESERVED, _);
disagree(M, NRESERVED) :- important(_, M, NRESERVED), important(_, N, NRESERVED), M != N, clock(_, _, NRESERVED, _);
post(M, NRESERVED) :- important(_, M, NRESERVED), clock(_, _, NRESERVED, _), notin disagree(M, NRESERVED);
bad(A, NRESERVED) :- important(A, "peter", NRESERVED), important(_, "foobar", NRESERVED), clock(A, A, NRESERVED, _);
good("yay", NRESERVED) :- important(A, M, NRESERVED), clock(A, A, NRESERVED, _), notin bad(A, NRESERVED);
timer_state(H, I, T - 1, NRESERVED + 1) :- timer_svc(H, I, T, NRESERVED), clock(H, _, NRESERVED, _);
timer_state(H, I, T - 1, NRESERVED + 1) :- timer_state(H, I, T, NRESERVED), T > 1, clock(H, _, NRESERVED, _), notin timer_cancel(H, I, NRESERVED);
timeout(H, I, NRESERVED) :- timer_state(H, I, 1, NRESERVED), clock(H, H, NRESERVED, _);
response_cnt(C, S, count<I>, NRESERVED) :- response_cnt_vars(C, S, _, I, _, _, NRESERVED);
response_cnt_vars(C, S, A, I, Os, O, NRESERVED) :- response_log(C, A, S, O, Os, NRESERVED), nodes(C, A, I, NRESERVED), clock(C, C, NRESERVED, _);
best(C, S, max<Os>, NRESERVED) :- best_vars(C, S, _, Os, _, NRESERVED);
best_vars(C, S, A, Os, O, NRESERVED) :- response_log(C, A, S, O, Os, NRESERVED), clock(C, C, NRESERVED, _);
agent_cnt(C, count<I>, NRESERVED) :- agent_cnt_vars(C, I, NRESERVED);
agent_cnt_vars(C, I, NRESERVED) :- what(C, I, NRESERVED), clock(C, C, NRESERVED, _);
highest_accepted(A, max<S>, NRESERVED) :- highest_accepted_vars(A, S, NRESERVED);
highest_accepted_vars(A, S, NRESERVED) :- accepted(A, S, _, NRESERVED), clock(A, A, NRESERVED, _);
timer_svc_prov0(A, M, 3, NRESERVED) :- proposal(A, M, NRESERVED), clock(A, A, NRESERVED, _);
nodes_prov1(A, N, I, NRESERVED, NRESERVED + 1) :- nodes(A, N, I, NRESERVED), clock(A, _, NRESERVED, _);
seed_prov2(A, S, NRESERVED, NRESERVED + 1) :- seed(A, S, NRESERVED), clock(A, _, NRESERVED, _), notin update_seed(A, NRESERVED);
seed_prov3(A, S + C, S, C, NRESERVED, NRESERVED + 1) :- seed(A, S, NRESERVED), update_seed(A, NRESERVED), agent_cnt(A, C, NRESERVED), clock(A, _, NRESERVED, _);
prepare_prov4(B, A, S, M, NRESERVED, MRESERVED) :- proposal(A, M, NRESERVED), seed(A, S, NRESERVED), nodes(A, B, _, NRESERVED), clock(A, B, NRESERVED, MRESERVED);
update_seed_prov5(A, NRESERVED) :- proposal(A, _, NRESERVED), clock(A, A, NRESERVED, _);
redo_prov6(A, M, NRESERVED) :- timeout(A, M, NRESERVED), clock(A, A, NRESERVED, _), notin accepted(A, _, M, NRESERVED);
prepare_prov7(B, A, S, M, NRESERVED, MRESERVED) :- redo(A, M, NRESERVED), seed(A, S, NRESERVED), nodes(A, B, _, NRESERVED), clock(A, B, NRESERVED, MRESERVED);
timer_svc_prov8(A, M, 3, NRESERVED) :- redo(A, M, NRESERVED), clock(A, A, NRESERVED, _);
update_seed_prov9(A, NRESERVED) :- redo(A, M, NRESERVED), clock(A, A, NRESERVED, _);
response_log_prov10(C, A, S, O, Os, NRESERVED) :- prepare_response(C, A, S, O, Os, NRESERVED), clock(C, C, NRESERVED, _);
response_log_prov11(C, A, S, O, M, NRESERVED, NRESERVED + 1) :- response_log(C, A, S, O, M, NRESERVED), clock(C, _, NRESERVED, _);
what_prov12(C, I, NRESERVED) :- nodes(C, _, I, NRESERVED), clock(C, C, NRESERVED, _);
accept_prov13(A, S, O, NRESERVED, C, Cnt2, Os, Cnt1, MRESERVED) :- agent_cnt(C, Cnt1, NRESERVED), response_cnt(C, S, Cnt2, NRESERVED), response_log(C, _, S, O, Os, NRESERVED), best(C, S, Os, NRESERVED), nodes(C, A, _, NRESERVED), Os != 1, Cnt2 > Cnt1 / 2, clock(C, A, NRESERVED, MRESERVED);
accept_prov14(A, S, P, NRESERVED, C, Cnt2, Os, Cnt1, MRESERVED) :- agent_cnt(C, Cnt1, NRESERVED), response_cnt(C, S, Cnt2, NRESERVED), response_log(C, _, S, O, Os, NRESERVED), best(C, S, Os, NRESERVED), my_proposal(C, P, NRESERVED), nodes(C, A, _, NRESERVED), Os == 1, Cnt2 > Cnt1 / 2, clock(C, A, NRESERVED, MRESERVED);
dominated_prov15(A, S, S2, NRESERVED) :- prepare(A, _, S, _, NRESERVED), prepare_log(A, S2, _, NRESERVED), S2 > S, clock(A, A, NRESERVED, _);
can_respond_prov16(A, C, S, M, NRESERVED) :- prepare(A, C, S, M, NRESERVED), clock(A, A, NRESERVED, _), notin dominated(A, S, NRESERVED);
prepare_response_prov17(C, A, S, O, Os, NRESERVED, MRESERVED) :- can_respond(A, C, S, M, NRESERVED), accepted(A, Os, O, NRESERVED), highest_accepted(A, Os, NRESERVED), clock(A, C, NRESERVED, MRESERVED);
prepare_response_prov18(C, A, S, "anything", 1, NRESERVED, MRESERVED) :- can_respond(A, C, S, M, NRESERVED), clock(A, C, NRESERVED, MRESERVED), notin accepted(A, _, _, NRESERVED);
accepted_prov19(A, S, M, NRESERVED) :- accept(A, S, M, NRESERVED), clock(A, A, NRESERVED, _);
accepted_prov20(A, S, M, NRESERVED, NRESERVED + 1) :- accepted(A, S, M, NRESERVED), clock(A, _, NRESERVED, _);
prepare_log_prov21(A, S, M, NRESERVED) :- prepare(A, _, S, M, NRESERVED), clock(A, A, NRESERVED, _);
prepare_log_prov22(A, S, M, NRESERVED, NRESERVED + 1) :- prepare_log(A, S, M, NRESERVED), clock(A, _, NRESERVED, _);
my_proposal_prov23(A, P, NRESERVED) :- proposal(A, P, NRESERVED), clock(A, A, NRESERVED, _);
my_proposal_prov24(A, P, NRESERVED, NRESERVED + 1) :- my_proposal(A, P, NRESERVED), clock(A, _, NRESERVED, _);
important_prov25(A, M, NRESERVED) :- accepted(A, _, M, NRESERVED), clock(A, A, NRESERVED, _), notin crash(A, A, _, NRESERVED);
pre_prov26(M, NRESERVED) :- important(_, M, NRESERVED), clock(_, _, NRESERVED, _);
disagree_prov27(M, N, NRESERVED) :- important(_, M, NRESERVED), important(_, N, NRESERVED), M != N, clock(_, _, NRESERVED, _);
post_prov28(M, NRESERVED) :- important(_, M, NRESERVED), clock(_, _, NRESERVED, _), notin disagree(M, NRESERVED);
bad_prov29(A, NRESERVED) :- important(A, "peter", NRESERVED), important(_, "foobar", NRESERVED), clock(A, A, NRESERVED, _);
good_prov30("yay", A, NRESERVED) :- important(A, M, NRESERVED), clock(A, A, NRESERVED, _), notin bad(A, NRESERVED);
timer_state_prov31(H, I, T - 1, T, NRESERVED, NRESERVED + 1) :- timer_svc(H, I, T, NRESERVED), clock(H, _, NRESERVED, _);
timer_state_prov32(H, I, T - 1, T, NRESERVED, NRESERVED + 1) :- timer_state(H, I, T, NRESERVED), T > 1, clock(H, _, NRESERVED, _), notin timer_cancel(H, I, NRESERVED);
timeout_prov33(H, I, NRESERVED) :- timer_state(H, I, 1, NRESERVED), clock(H, H, NRESERVED, _);
response_cnt_prov34(C, S, count<I>, NRESERVED) :- response_cnt_vars(C, S, _, I, _, _, NRESERVED);
response_cnt_vars_prov35(C, S, A, I, Os, O, NRESERVED) :- response_log(C, A, S, O, Os, NRESERVED), nodes(C, A, I, NRESERVED), clock(C, C, NRESERVED, _);
best_prov36(C, S, max<Os>, NRESERVED) :- best_vars(C, S, _, Os, _, NRESERVED);
best_vars_prov37(C, S, A, Os, O, NRESERVED) :- response_log(C, A, S, O, Os, NRESERVED), clock(C, C, NRESERVED, _);
agent_cnt_prov38(C, count<I>, NRESERVED) :- agent_cnt_vars(C, I, NRESERVED);
agent_cnt_vars_prov39(C, I, NRESERVED) :- what(C, I, NRESERVED), clock(C, C, NRESERVED, _);
highest_accepted_prov40(A, max<S>, NRESERVED) :- highest_accepted_vars(A, S, NRESERVED);
highest_accepted_vars_prov41(A, S, NRESERVED) :- accepted(A, S, _, NRESERVED), clock(A, A, NRESERVED, _);
clock("a", "a", 1, 2);
clock("b", "b", 1, 2);
clock("c", "c", 1, 2);
clock("a", "a", 1, 2);
clock("a", "b", 1, 99999);
clock("a", "c", 1, 99999);
clock("b", "a", 1, 99999);
clock("b", "b", 1, 2);
clock("b", "c", 1, 99999);
clock("c", "a", 1, 2);
clock("c", "b", 1, 2);
clock("c", "c", 1, 2);
clock("a", "a", 2, 3);
clock("b", "b", 2, 3);
clock("c", "c", 2, 3);
clock("a", "a", 2, 3);
clock("a", "b", 2, 3);
clock("a", "c", 2, 3);
clock("b", "a", 2, 3);
clock("b", "b", 2, 3);
clock("b", "c", 2, 3);
clock("c", "a", 2, 3);
clock("c", "b", 2, 3);
clock("c", "c", 2, 3);
clock("a", "a", 3, 4);
clock("b", "b", 3, 4);
clock("c", "c", 3, 4);
clock("a", "a", 3, 4);
clock("a", "b", 3, 4);
clock("a", "c", 3, 4);
clock("b", "a", 3, 4);
clock("b", "b", 3, 4);
clock("b", "c", 3, 4);
clock("c", "a", 3, 4);
clock("c", "b", 3, 4);
clock("c", "c", 3, 4);
clock("a", "a", 4, 5);
clock("b", "b", 4, 5);
clock("c", "c", 4, 5);
clock("a", "a", 4, 5);
clock("a", "b", 4, 5);
clock("a", "c", 4, 5);
clock("b", "a", 4, 5);
clock("b", "b", 4, 5);
clock("b", "c", 4, 5);
clock("c", "a", 4, 5);
clock("c", "b", 4, 5);
clock("c", "c", 4, 5);
