
This document details weird c4 behaviors observed while testing DM-SIP v. Combo v. Molly on 6/3/2018 on classic_rb through Test_program_complexity.py.
Running program1 (see below) through c4 produces the results listed below (results1).
The weird behavior is identical regardless of whether the program lines are fed into c4 in bulk or individually.

Claim: (a,hello,2) \in pre.
Pf:
Given pre(X,Pl,NRESERVED) :- log(X,Pl,NRESERVED), not_bcast_f1(X,Pl,_);
(a,hello,2) \in log by results1.

NTS (a,hello,_) \in the complement of bcast.

Observe (a,hello,2) is not in bcast.
Therefore, (a,hello,2) is in the complement of BCAST. QED.

Observe log(a,hello,2) and notin bcast(a,hello,2).
Then, pre(a,hello,2). QED.


results1:
---------------------------
crash
---------------------------
bcast_prov2
a,hello,3,b,4
b,hello,3,a,4
a,hello,2,b,3
c,hello,4,a,5
b,hello,1,a,2
a,hello,4,c,5
b,hello,6,a,7
a,hello,6,b,7
c,hello,5,a,6
a,hello,5,c,6
c,hello,6,b,7
b,hello,6,c,7
b,hello,3,c,4
c,hello,3,b,4
b,hello,2,c,3
c,hello,2,b,3
b,hello,5,a,6
a,hello,5,b,6
c,hello,4,b,5
b,hello,4,c,5
c,hello,5,b,6
b,hello,5,c,6
a,hello,4,b,5
b,hello,4,a,5
c,hello,1,a,2
c,hello,6,a,7
a,hello,6,c,7
a,hello,3,c,4
c,hello,3,a,4
a,hello,2,c,3
---------------------------
log_prov1
b,hello,5,6
a,hello,5,6
a,hello,2,3
a,hello,3,4
b,hello,3,4
c,hello,4,5
b,hello,6,7
a,hello,6,7
c,hello,5,6
b,hello,4,5
c,hello,6,7
a,hello,4,5
c,hello,3,4
---------------------------
post_prov6
c,hello,6
c,hello,3
b,hello,4
b,hello,5
a,hello,4
a,hello,5
b,hello,6
a,hello,6
c,hello,4
c,hello,5
a,hello,3
b,hello,3
---------------------------
missing_log_prov4
b,hello,a,2
c,hello,a,2
---------------------------
post
c,hello,6
c,hello,3
b,hello,4
b,hello,5
a,hello,4
a,hello,5
b,hello,6
a,hello,6
c,hello,4
c,hello,5
a,hello,3
b,hello,3
---------------------------
log_prov3
b,hello,5,6
a,hello,5,6
a,hello,3,4
b,hello,2,3
b,hello,3,4
c,hello,4,5
b,hello,6,7
a,hello,1,2
a,hello,6,7
c,hello,5,6
b,hello,4,5
c,hello,6,7
a,hello,4,5
c,hello,2,3
c,hello,3,4
---------------------------
node
c,a,4
a,c,4
a,b,1
b,a,1
a,b,3
b,a,3
a,c,6
c,a,6
c,b,3
b,c,3
b,c,1
c,b,1
a,b,6
b,a,6
c,b,4
b,c,4
b,c,6
c,b,6
c,a,3
a,c,3
b,a,4
a,b,4
a,c,1
c,a,1
b,c,7
c,b,7
c,a,5
a,c,5
a,c,2
c,a,2
a,b,7
b,a,7
a,c,7
c,a,7
c,b,5
b,c,5
b,c,2
c,b,2
b,a,5
a,b,5
a,b,2
b,a,2
---------------------------
node_prov0
c,a,5,6
a,c,5,6
b,c,1,2
c,b,1,2
b,c,6,7
c,b,6,7
b,c,2,3
c,b,2,3
a,b,2,3
b,a,2,3
a,b,6,7
c,a,4,5
a,c,4,5
a,b,1,2
b,a,1,2
b,a,6,7
c,b,5,6
b,c,5,6
a,c,6,7
b,a,4,5
a,b,4,5
a,c,1,2
c,a,1,2
c,a,6,7
a,c,2,3
c,a,2,3
b,a,5,6
a,b,5,6
c,b,4,5
b,c,4,5
c,b,3,4
b,c,3,4
a,b,3,4
b,a,3,4
c,a,3,4
a,c,3,4
---------------------------
pre
c,hello,6
c,hello,3
b,hello,4
b,hello,5
b,hello,6
c,hello,4
c,hello,5
b,hello,3
---------------------------
clock
a,c,5,6
c,a,5,6
c,c,4,5
b,b,4,5
a,a,4,5
b,c,1,2
c,b,1,2
b,c,6,7
c,b,6,7
c,b,2,3
b,c,2,3
a,a,5,6
b,b,5,6
c,c,5,6
a,b,2,3
b,a,2,3
a,c,4,5
a,b,1,2
b,a,1,2
c,a,4,5
a,b,6,7
b,a,6,7
b,c,5,6
c,b,5,6
a,b,4,5
a,c,1,2
c,a,1,2
b,a,4,5
a,c,6,7
c,a,6,7
c,a,2,3
a,c,2,3
a,b,5,6
b,a,5,6
a,a,2,3
b,b,2,3
c,c,2,3
a,a,1,2
b,b,1,2
c,c,1,2
b,c,4,5
c,b,4,5
a,a,6,7
b,b,6,7
c,c,6,7
c,b,3,4
b,c,3,4
b,a,3,4
a,b,3,4
c,a,3,4
a,c,3,4
c,c,3,4
b,b,3,4
a,a,3,4
---------------------------
log
a,hello,7
c,hello,3
b,hello,5
b,hello,4
c,hello,7
b,hello,6
a,hello,3
b,hello,7
c,hello,6
a,hello,5
a,hello,4
a,hello,2
a,hello,6
c,hello,5
c,hello,4
b,hello,3
---------------------------
missing_log
b,hello,2
c,hello,2
---------------------------
pre_prov5
c,hello,6
c,hello,3
b,hello,4
b,hello,5
b,hello,6
c,hello,4
c,hello,5
b,hello,3
---------------------------
bcast
a,hello,7
c,hello,3
b,hello,5
b,hello,4
b,hello,2
b,hello,6
c,hello,7
a,hello,1
a,hello,3
b,hello,7
c,hello,6
a,hello,5
a,hello,4
a,hello,6
c,hello,5
c,hello,4
c,hello,2
b,hello,3

program1:
define(crash, {string, string, int, int});
define(bcast_prov2, {string, string, int, string, int});
define(log_prov1, {string, string, int, int});
define(post_prov6, {string, string, int});
define(missing_log_prov4, {string, string, string, int});
define(post, {string, string, int});
define(log_prov3, {string, string, int, int});
define(node, {string, string, int});
define(node_prov0, {string, string, int, int});
define(pre, {string, string, int});
define(clock, {string, string, int, int});
define(log, {string, string, int});
define(missing_log, {string, string, int});
define(pre_prov5, {string, string, int});
define(bcast, {string, string, int});
node(Node, Neighbor, NRESERVED + 1) :- node(Node, Neighbor, NRESERVED), clock(Node, _, NRESERVED, _);
log(Node, Pload, NRESERVED + 1) :- log(Node, Pload, NRESERVED), clock(Node, _, NRESERVED, _);
bcast(Node2, Pload, MRESERVED) :- bcast(Node1, Pload, NRESERVED), node(Node1, Node2, NRESERVED), clock(Node1, Node2, NRESERVED, MRESERVED);
log(N, P, NRESERVED + 1) :- bcast(N, P, NRESERVED), clock(N, _, NRESERVED, _);
missing_log(A, Pl, NRESERVED) :- log(X, Pl, NRESERVED), node(X, A, NRESERVED), clock(X, X, NRESERVED, _), notin log(A, Pl, NRESERVED);
pre(X, Pl, NRESERVED) :- log(X, Pl, NRESERVED), clock(X, X, NRESERVED, _), notin bcast(X, Pl, 1), notin crash(X, X, _, NRESERVED);
post(X, Pl, NRESERVED) :- log(X, Pl, NRESERVED), clock(X, X, NRESERVED, _), notin missing_log(_, Pl, NRESERVED);
node_prov0(Node, Neighbor, NRESERVED, NRESERVED + 1) :- node(Node, Neighbor, NRESERVED), clock(Node, _, NRESERVED, _);
log_prov1(Node, Pload, NRESERVED, NRESERVED + 1) :- log(Node, Pload, NRESERVED), clock(Node, _, NRESERVED, _);
bcast_prov2(Node2, Pload, NRESERVED, Node1, MRESERVED) :- bcast(Node1, Pload, NRESERVED), node(Node1, Node2, NRESERVED), clock(Node1, Node2, NRESERVED, MRESERVED);
log_prov3(N, P, NRESERVED, NRESERVED + 1) :- bcast(N, P, NRESERVED), clock(N, _, NRESERVED, _);
missing_log_prov4(A, Pl, X, NRESERVED) :- log(X, Pl, NRESERVED), node(X, A, NRESERVED), clock(X, X, NRESERVED, _), notin log(A, Pl, NRESERVED);
pre_prov5(X, Pl, NRESERVED) :- log(X, Pl, NRESERVED), clock(X, X, NRESERVED, _), notin bcast(X, Pl, 1), notin crash(X, X, _, NRESERVED);
post_prov6(X, Pl, NRESERVED) :- log(X, Pl, NRESERVED), clock(X, X, NRESERVED, _), notin missing_log(_, Pl, NRESERVED);
node("a", "b", 1);
node("a", "c", 1);
node("b", "a", 1);
node("b", "c", 1);
node("c", "a", 1);
node("c", "b", 1);
bcast("a", "hello", 1);
clock("a", "a", 1, 2);
clock("b", "b", 1, 2);
clock("c", "c", 1, 2);
clock("a", "a", 1, 2);
clock("a", "b", 1, 2);
clock("a", "c", 1, 2);
clock("b", "a", 1, 2);
clock("b", "b", 1, 2);
clock("b", "c", 1, 2);
clock("c", "a", 1, 2);
clock("c", "b", 1, 2);
clock("c", "c", 1, 2);
clock("a", "a", 2, 3);
clock("b", "b", 2, 3);
clock("c", "c", 2, 3);
clock("a", "a", 2, 3);
clock("a", "b", 2, 3);
clock("a", "c", 2, 3);
clock("b", "a", 2, 3);
clock("b", "b", 2, 3);
clock("b", "c", 2, 3);
clock("c", "a", 2, 3);
clock("c", "b", 2, 3);
clock("c", "c", 2, 3);
clock("a", "a", 3, 4);
clock("b", "b", 3, 4);
clock("c", "c", 3, 4);
clock("a", "a", 3, 4);
clock("a", "b", 3, 4);
clock("a", "c", 3, 4);
clock("b", "a", 3, 4);
clock("b", "b", 3, 4);
clock("b", "c", 3, 4);
clock("c", "a", 3, 4);
clock("c", "b", 3, 4);
clock("c", "c", 3, 4);
clock("a", "a", 4, 5);
clock("b", "b", 4, 5);
clock("c", "c", 4, 5);
clock("a", "a", 4, 5);
clock("a", "b", 4, 5);
clock("a", "c", 4, 5);
clock("b", "a", 4, 5);
clock("b", "b", 4, 5);
clock("b", "c", 4, 5);
clock("c", "a", 4, 5);
clock("c", "b", 4, 5);
clock("c", "c", 4, 5);
clock("a", "a", 5, 6);
clock("b", "b", 5, 6);
clock("c", "c", 5, 6);
clock("a", "a", 5, 6);
clock("a", "b", 5, 6);
clock("a", "c", 5, 6);
clock("b", "a", 5, 6);
clock("b", "b", 5, 6);
clock("b", "c", 5, 6);
clock("c", "a", 5, 6);
clock("c", "b", 5, 6);
clock("c", "c", 5, 6);
clock("a", "a", 6, 7);
clock("b", "b", 6, 7);
clock("c", "c", 6, 7);
clock("a", "a", 6, 7);
clock("a", "b", 6, 7);
clock("a", "c", 6, 7);
clock("b", "a", 6, 7);
clock("b", "b", 6, 7);
clock("b", "c", 6, 7);
clock("c", "a", 6, 7);
clock("c", "b", 6, 7);
clock("c", "c", 6, 7);
